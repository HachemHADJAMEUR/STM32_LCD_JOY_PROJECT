
LCD_WITH_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003324  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080034ac  080034ac  000134ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003524  08003524  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003524  08003524  00013524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800352c  0800352c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800352c  0800352c  0001352c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003530  08003530  00013530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  08003540  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08003540  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b4e0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a79  00000000  00000000  0002b51c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  0002cf98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000880  00000000  00000000  0002d8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000255a2  00000000  00000000  0002e158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b943  00000000  00000000  000536fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e59d6  00000000  00000000  0005f03d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00144a13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023f4  00000000  00000000  00144a64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003494 	.word	0x08003494

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003494 	.word	0x08003494

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80004d0:	4b14      	ldr	r3, [pc, #80]	; (8000524 <DWT_Delay_Init+0x58>)
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	4a13      	ldr	r2, [pc, #76]	; (8000524 <DWT_Delay_Init+0x58>)
 80004d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80004da:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80004dc:	4b11      	ldr	r3, [pc, #68]	; (8000524 <DWT_Delay_Init+0x58>)
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	4a10      	ldr	r2, [pc, #64]	; (8000524 <DWT_Delay_Init+0x58>)
 80004e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004e6:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80004e8:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <DWT_Delay_Init+0x5c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a0e      	ldr	r2, [pc, #56]	; (8000528 <DWT_Delay_Init+0x5c>)
 80004ee:	f023 0301 	bic.w	r3, r3, #1
 80004f2:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <DWT_Delay_Init+0x5c>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <DWT_Delay_Init+0x5c>)
 80004fa:	f043 0301 	orr.w	r3, r3, #1
 80004fe:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000500:	4b09      	ldr	r3, [pc, #36]	; (8000528 <DWT_Delay_Init+0x5c>)
 8000502:	2200      	movs	r2, #0
 8000504:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000506:	bf00      	nop
    __ASM volatile ("NOP");
 8000508:	bf00      	nop
    __ASM volatile ("NOP");
 800050a:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 800050c:	4b06      	ldr	r3, [pc, #24]	; (8000528 <DWT_Delay_Init+0x5c>)
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8000514:	2300      	movs	r3, #0
 8000516:	e000      	b.n	800051a <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8000518:	2301      	movs	r3, #1
    }
}
 800051a:	4618      	mov	r0, r3
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	e000edf0 	.word	0xe000edf0
 8000528:	e0001000 	.word	0xe0001000

0800052c <DWT_Delay_us>:
uint32_t DWT_Delay_Init(void);


// This Function Provides Delay In Microseconds Using DWT
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000534:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <DWT_Delay_us+0x48>)
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 800053a:	f001 fd75 	bl	8002028 <HAL_RCC_GetHCLKFreq>
 800053e:	4603      	mov	r3, r0
 8000540:	4a0d      	ldr	r2, [pc, #52]	; (8000578 <DWT_Delay_us+0x4c>)
 8000542:	fba2 2303 	umull	r2, r3, r2, r3
 8000546:	0c9b      	lsrs	r3, r3, #18
 8000548:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	68ba      	ldr	r2, [r7, #8]
 800054e:	fb02 f303 	mul.w	r3, r2, r3
 8000552:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8000554:	bf00      	nop
 8000556:	4b07      	ldr	r3, [pc, #28]	; (8000574 <DWT_Delay_us+0x48>)
 8000558:	685a      	ldr	r2, [r3, #4]
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	1ad2      	subs	r2, r2, r3
 800055e:	6879      	ldr	r1, [r7, #4]
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	1acb      	subs	r3, r1, r3
 8000564:	429a      	cmp	r2, r3
 8000566:	d3f6      	bcc.n	8000556 <DWT_Delay_us+0x2a>
}
 8000568:	bf00      	nop
 800056a:	bf00      	nop
 800056c:	3710      	adds	r7, #16
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	e0001000 	.word	0xe0001000
 8000578:	431bde83 	.word	0x431bde83

0800057c <DWT_Delay_ms>:

// This Function Provides Delay In Milliseconds Using DWT
__STATIC_INLINE void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <DWT_Delay_ms+0x44>)
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 800058a:	f001 fd4d 	bl	8002028 <HAL_RCC_GetHCLKFreq>
 800058e:	4603      	mov	r3, r0
 8000590:	4a0c      	ldr	r2, [pc, #48]	; (80005c4 <DWT_Delay_ms+0x48>)
 8000592:	fba2 2303 	umull	r2, r3, r2, r3
 8000596:	099b      	lsrs	r3, r3, #6
 8000598:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	68ba      	ldr	r2, [r7, #8]
 800059e:	fb02 f303 	mul.w	r3, r2, r3
 80005a2:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 80005a4:	bf00      	nop
 80005a6:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <DWT_Delay_ms+0x44>)
 80005a8:	685a      	ldr	r2, [r3, #4]
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	1ad2      	subs	r2, r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d3f8      	bcc.n	80005a6 <DWT_Delay_ms+0x2a>
}
 80005b4:	bf00      	nop
 80005b6:	bf00      	nop
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	e0001000 	.word	0xe0001000
 80005c4:	10624dd3 	.word	0x10624dd3

080005c8 <LCD_DATA>:


//-----[ Alphanumeric LCD 16x2 Routines ]-----

void LCD_DATA(unsigned char Data)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
    if(Data & 1)
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	f003 0301 	and.w	r3, r3, #1
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d008      	beq.n	80005ee <LCD_DATA+0x26>
      HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, 1);
 80005dc:	4b2b      	ldr	r3, [pc, #172]	; (800068c <LCD_DATA+0xc4>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a2a      	ldr	r2, [pc, #168]	; (800068c <LCD_DATA+0xc4>)
 80005e2:	8891      	ldrh	r1, [r2, #4]
 80005e4:	2201      	movs	r2, #1
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 ff3a 	bl	8001460 <HAL_GPIO_WritePin>
 80005ec:	e007      	b.n	80005fe <LCD_DATA+0x36>
    else
      HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, 0);
 80005ee:	4b27      	ldr	r3, [pc, #156]	; (800068c <LCD_DATA+0xc4>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a26      	ldr	r2, [pc, #152]	; (800068c <LCD_DATA+0xc4>)
 80005f4:	8891      	ldrh	r1, [r2, #4]
 80005f6:	2200      	movs	r2, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 ff31 	bl	8001460 <HAL_GPIO_WritePin>
    if(Data & 2)
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	f003 0302 	and.w	r3, r3, #2
 8000604:	2b00      	cmp	r3, #0
 8000606:	d008      	beq.n	800061a <LCD_DATA+0x52>
      HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, 1);
 8000608:	4b20      	ldr	r3, [pc, #128]	; (800068c <LCD_DATA+0xc4>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a1f      	ldr	r2, [pc, #124]	; (800068c <LCD_DATA+0xc4>)
 800060e:	88d1      	ldrh	r1, [r2, #6]
 8000610:	2201      	movs	r2, #1
 8000612:	4618      	mov	r0, r3
 8000614:	f000 ff24 	bl	8001460 <HAL_GPIO_WritePin>
 8000618:	e007      	b.n	800062a <LCD_DATA+0x62>
    else
      HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, 0);
 800061a:	4b1c      	ldr	r3, [pc, #112]	; (800068c <LCD_DATA+0xc4>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a1b      	ldr	r2, [pc, #108]	; (800068c <LCD_DATA+0xc4>)
 8000620:	88d1      	ldrh	r1, [r2, #6]
 8000622:	2200      	movs	r2, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f000 ff1b 	bl	8001460 <HAL_GPIO_WritePin>
    if(Data & 4)
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	f003 0304 	and.w	r3, r3, #4
 8000630:	2b00      	cmp	r3, #0
 8000632:	d008      	beq.n	8000646 <LCD_DATA+0x7e>
      HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, 1);
 8000634:	4b15      	ldr	r3, [pc, #84]	; (800068c <LCD_DATA+0xc4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a14      	ldr	r2, [pc, #80]	; (800068c <LCD_DATA+0xc4>)
 800063a:	8911      	ldrh	r1, [r2, #8]
 800063c:	2201      	movs	r2, #1
 800063e:	4618      	mov	r0, r3
 8000640:	f000 ff0e 	bl	8001460 <HAL_GPIO_WritePin>
 8000644:	e007      	b.n	8000656 <LCD_DATA+0x8e>
    else
      HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, 0);
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <LCD_DATA+0xc4>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a10      	ldr	r2, [pc, #64]	; (800068c <LCD_DATA+0xc4>)
 800064c:	8911      	ldrh	r1, [r2, #8]
 800064e:	2200      	movs	r2, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f000 ff05 	bl	8001460 <HAL_GPIO_WritePin>
    if(Data & 8)
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	f003 0308 	and.w	r3, r3, #8
 800065c:	2b00      	cmp	r3, #0
 800065e:	d008      	beq.n	8000672 <LCD_DATA+0xaa>
      HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, 1);
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <LCD_DATA+0xc4>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a09      	ldr	r2, [pc, #36]	; (800068c <LCD_DATA+0xc4>)
 8000666:	8951      	ldrh	r1, [r2, #10]
 8000668:	2201      	movs	r2, #1
 800066a:	4618      	mov	r0, r3
 800066c:	f000 fef8 	bl	8001460 <HAL_GPIO_WritePin>
    else
      HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, 0);
}
 8000670:	e007      	b.n	8000682 <LCD_DATA+0xba>
      HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, 0);
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <LCD_DATA+0xc4>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a05      	ldr	r2, [pc, #20]	; (800068c <LCD_DATA+0xc4>)
 8000678:	8951      	ldrh	r1, [r2, #10]
 800067a:	2200      	movs	r2, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f000 feef 	bl	8001460 <HAL_GPIO_WritePin>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	080034c8 	.word	0x080034c8

08000690 <LCD_CMD>:
void LCD_CMD(unsigned char a_CMD)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
    // Select Command Register
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, 0);
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <LCD_CMD+0x60>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <LCD_CMD+0x60>)
 80006a0:	89d1      	ldrh	r1, [r2, #14]
 80006a2:	2200      	movs	r2, #0
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 fedb 	bl	8001460 <HAL_GPIO_WritePin>
    // Move The Command Data To LCD
    LCD_DATA(a_CMD);
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ff8b 	bl	80005c8 <LCD_DATA>
    // Send The EN Clock Signal
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 80006b2:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <LCD_CMD+0x60>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a0e      	ldr	r2, [pc, #56]	; (80006f0 <LCD_CMD+0x60>)
 80006b8:	8991      	ldrh	r1, [r2, #12]
 80006ba:	2201      	movs	r2, #1
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 fecf 	bl	8001460 <HAL_GPIO_WritePin>
    DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <LCD_CMD+0x60>)
 80006c4:	8a1b      	ldrh	r3, [r3, #16]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ff30 	bl	800052c <DWT_Delay_us>
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <LCD_CMD+0x60>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a07      	ldr	r2, [pc, #28]	; (80006f0 <LCD_CMD+0x60>)
 80006d2:	8991      	ldrh	r1, [r2, #12]
 80006d4:	2200      	movs	r2, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fec2 	bl	8001460 <HAL_GPIO_WritePin>
    DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 80006dc:	4b04      	ldr	r3, [pc, #16]	; (80006f0 <LCD_CMD+0x60>)
 80006de:	8a1b      	ldrh	r3, [r3, #16]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff ff23 	bl	800052c <DWT_Delay_us>
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	080034c8 	.word	0x080034c8

080006f4 <LCD_Clear>:
void LCD_Clear()
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
    LCD_CMD(0);
 80006f8:	2000      	movs	r0, #0
 80006fa:	f7ff ffc9 	bl	8000690 <LCD_CMD>
    LCD_CMD(1);
 80006fe:	2001      	movs	r0, #1
 8000700:	f7ff ffc6 	bl	8000690 <LCD_CMD>
    DWT_Delay_us(70);
 8000704:	2046      	movs	r0, #70	; 0x46
 8000706:	f7ff ff11 	bl	800052c <DWT_Delay_us>
}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}

0800070e <LCD_Set_Cursor>:
void LCD_Set_Cursor(unsigned char r, unsigned char c)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	b084      	sub	sp, #16
 8000712:	af00      	add	r7, sp, #0
 8000714:	4603      	mov	r3, r0
 8000716:	460a      	mov	r2, r1
 8000718:	71fb      	strb	r3, [r7, #7]
 800071a:	4613      	mov	r3, r2
 800071c:	71bb      	strb	r3, [r7, #6]
    unsigned char Temp,Low4,High4;
    if(r == 1)
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d111      	bne.n	8000748 <LCD_Set_Cursor+0x3a>
    {
      Temp  = 0x80 + c - 1; //0x80 is used to move the cursor
 8000724:	79bb      	ldrb	r3, [r7, #6]
 8000726:	337f      	adds	r3, #127	; 0x7f
 8000728:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 800072a:	7bfb      	ldrb	r3, [r7, #15]
 800072c:	091b      	lsrs	r3, r3, #4
 800072e:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 8000730:	7bfb      	ldrb	r3, [r7, #15]
 8000732:	f003 030f 	and.w	r3, r3, #15
 8000736:	737b      	strb	r3, [r7, #13]
      LCD_CMD(High4);
 8000738:	7bbb      	ldrb	r3, [r7, #14]
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ffa8 	bl	8000690 <LCD_CMD>
      LCD_CMD(Low4);
 8000740:	7b7b      	ldrb	r3, [r7, #13]
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ffa4 	bl	8000690 <LCD_CMD>
    }
    if(r == 2)
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	2b02      	cmp	r3, #2
 800074c:	d111      	bne.n	8000772 <LCD_Set_Cursor+0x64>
    {
      Temp  = 0xC0 + c - 1;
 800074e:	79bb      	ldrb	r3, [r7, #6]
 8000750:	3b41      	subs	r3, #65	; 0x41
 8000752:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	091b      	lsrs	r3, r3, #4
 8000758:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 800075a:	7bfb      	ldrb	r3, [r7, #15]
 800075c:	f003 030f 	and.w	r3, r3, #15
 8000760:	737b      	strb	r3, [r7, #13]
      LCD_CMD(High4);
 8000762:	7bbb      	ldrb	r3, [r7, #14]
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff93 	bl	8000690 <LCD_CMD>
      LCD_CMD(Low4);
 800076a:	7b7b      	ldrb	r3, [r7, #13]
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ff8f 	bl	8000690 <LCD_CMD>
    }
    DWT_Delay_ms(2);
 8000772:	2002      	movs	r0, #2
 8000774:	f7ff ff02 	bl	800057c <DWT_Delay_ms>
}
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <LCD_Init>:
void LCD_Init()
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	; 0x28
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
  // Initialize The DWT Delay Function Which Will Be Used Later On
  DWT_Delay_Init();
 8000796:	f7ff fe99 	bl	80004cc <DWT_Delay_Init>
    // IO Pin Configurations
  if(LCD16x2_CfgParam.LCD_GPIO == GPIOA)
 800079a:	4b70      	ldr	r3, [pc, #448]	; (800095c <LCD_Init+0x1dc>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80007a2:	d10c      	bne.n	80007be <LCD_Init+0x3e>
      __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a4:	4b6e      	ldr	r3, [pc, #440]	; (8000960 <LCD_Init+0x1e0>)
 80007a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a8:	4a6d      	ldr	r2, [pc, #436]	; (8000960 <LCD_Init+0x1e0>)
 80007aa:	f043 0301 	orr.w	r3, r3, #1
 80007ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b0:	4b6b      	ldr	r3, [pc, #428]	; (8000960 <LCD_Init+0x1e0>)
 80007b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	693b      	ldr	r3, [r7, #16]
 80007bc:	e034      	b.n	8000828 <LCD_Init+0xa8>
  else if(LCD16x2_CfgParam.LCD_GPIO == GPIOB)
 80007be:	4b67      	ldr	r3, [pc, #412]	; (800095c <LCD_Init+0x1dc>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a68      	ldr	r2, [pc, #416]	; (8000964 <LCD_Init+0x1e4>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d10c      	bne.n	80007e2 <LCD_Init+0x62>
      __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c8:	4b65      	ldr	r3, [pc, #404]	; (8000960 <LCD_Init+0x1e0>)
 80007ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007cc:	4a64      	ldr	r2, [pc, #400]	; (8000960 <LCD_Init+0x1e0>)
 80007ce:	f043 0302 	orr.w	r3, r3, #2
 80007d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d4:	4b62      	ldr	r3, [pc, #392]	; (8000960 <LCD_Init+0x1e0>)
 80007d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d8:	f003 0302 	and.w	r3, r3, #2
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	e022      	b.n	8000828 <LCD_Init+0xa8>
  else if(LCD16x2_CfgParam.LCD_GPIO == GPIOC)
 80007e2:	4b5e      	ldr	r3, [pc, #376]	; (800095c <LCD_Init+0x1dc>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a60      	ldr	r2, [pc, #384]	; (8000968 <LCD_Init+0x1e8>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d10c      	bne.n	8000806 <LCD_Init+0x86>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ec:	4b5c      	ldr	r3, [pc, #368]	; (8000960 <LCD_Init+0x1e0>)
 80007ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f0:	4a5b      	ldr	r2, [pc, #364]	; (8000960 <LCD_Init+0x1e0>)
 80007f2:	f043 0304 	orr.w	r3, r3, #4
 80007f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f8:	4b59      	ldr	r3, [pc, #356]	; (8000960 <LCD_Init+0x1e0>)
 80007fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fc:	f003 0304 	and.w	r3, r3, #4
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	e010      	b.n	8000828 <LCD_Init+0xa8>
  else if(LCD16x2_CfgParam.LCD_GPIO == GPIOD)
 8000806:	4b55      	ldr	r3, [pc, #340]	; (800095c <LCD_Init+0x1dc>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a58      	ldr	r2, [pc, #352]	; (800096c <LCD_Init+0x1ec>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d10b      	bne.n	8000828 <LCD_Init+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000810:	4b53      	ldr	r3, [pc, #332]	; (8000960 <LCD_Init+0x1e0>)
 8000812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000814:	4a52      	ldr	r2, [pc, #328]	; (8000960 <LCD_Init+0x1e0>)
 8000816:	f043 0308 	orr.w	r3, r3, #8
 800081a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081c:	4b50      	ldr	r3, [pc, #320]	; (8000960 <LCD_Init+0x1e0>)
 800081e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000820:	f003 0308 	and.w	r3, r3, #8
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, GPIO_PIN_RESET);
 8000828:	4b4c      	ldr	r3, [pc, #304]	; (800095c <LCD_Init+0x1dc>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a4b      	ldr	r2, [pc, #300]	; (800095c <LCD_Init+0x1dc>)
 800082e:	8891      	ldrh	r1, [r2, #4]
 8000830:	2200      	movs	r2, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f000 fe14 	bl	8001460 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, GPIO_PIN_RESET);
 8000838:	4b48      	ldr	r3, [pc, #288]	; (800095c <LCD_Init+0x1dc>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a47      	ldr	r2, [pc, #284]	; (800095c <LCD_Init+0x1dc>)
 800083e:	88d1      	ldrh	r1, [r2, #6]
 8000840:	2200      	movs	r2, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f000 fe0c 	bl	8001460 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, GPIO_PIN_RESET);
 8000848:	4b44      	ldr	r3, [pc, #272]	; (800095c <LCD_Init+0x1dc>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a43      	ldr	r2, [pc, #268]	; (800095c <LCD_Init+0x1dc>)
 800084e:	8911      	ldrh	r1, [r2, #8]
 8000850:	2200      	movs	r2, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f000 fe04 	bl	8001460 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, GPIO_PIN_RESET);
 8000858:	4b40      	ldr	r3, [pc, #256]	; (800095c <LCD_Init+0x1dc>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a3f      	ldr	r2, [pc, #252]	; (800095c <LCD_Init+0x1dc>)
 800085e:	8951      	ldrh	r1, [r2, #10]
 8000860:	2200      	movs	r2, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f000 fdfc 	bl	8001460 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, GPIO_PIN_RESET);
 8000868:	4b3c      	ldr	r3, [pc, #240]	; (800095c <LCD_Init+0x1dc>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a3b      	ldr	r2, [pc, #236]	; (800095c <LCD_Init+0x1dc>)
 800086e:	89d1      	ldrh	r1, [r2, #14]
 8000870:	2200      	movs	r2, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f000 fdf4 	bl	8001460 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, GPIO_PIN_RESET);
 8000878:	4b38      	ldr	r3, [pc, #224]	; (800095c <LCD_Init+0x1dc>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a37      	ldr	r2, [pc, #220]	; (800095c <LCD_Init+0x1dc>)
 800087e:	8991      	ldrh	r1, [r2, #12]
 8000880:	2200      	movs	r2, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f000 fdec 	bl	8001460 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LCD16x2_CfgParam.D4_PIN | LCD16x2_CfgParam.D5_PIN |
 8000888:	4b34      	ldr	r3, [pc, #208]	; (800095c <LCD_Init+0x1dc>)
 800088a:	889a      	ldrh	r2, [r3, #4]
 800088c:	4b33      	ldr	r3, [pc, #204]	; (800095c <LCD_Init+0x1dc>)
 800088e:	88db      	ldrh	r3, [r3, #6]
      LCD16x2_CfgParam.D6_PIN |LCD16x2_CfgParam.D7_PIN | LCD16x2_CfgParam.RS_PIN |
 8000890:	4313      	orrs	r3, r2
 8000892:	b29a      	uxth	r2, r3
 8000894:	4b31      	ldr	r3, [pc, #196]	; (800095c <LCD_Init+0x1dc>)
 8000896:	891b      	ldrh	r3, [r3, #8]
 8000898:	4313      	orrs	r3, r2
 800089a:	b29a      	uxth	r2, r3
 800089c:	4b2f      	ldr	r3, [pc, #188]	; (800095c <LCD_Init+0x1dc>)
 800089e:	895b      	ldrh	r3, [r3, #10]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	4b2d      	ldr	r3, [pc, #180]	; (800095c <LCD_Init+0x1dc>)
 80008a6:	89db      	ldrh	r3, [r3, #14]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	b29a      	uxth	r2, r3
      LCD16x2_CfgParam.EN_PIN;
 80008ac:	4b2b      	ldr	r3, [pc, #172]	; (800095c <LCD_Init+0x1dc>)
 80008ae:	899b      	ldrh	r3, [r3, #12]
      LCD16x2_CfgParam.D6_PIN |LCD16x2_CfgParam.D7_PIN | LCD16x2_CfgParam.RS_PIN |
 80008b0:	4313      	orrs	r3, r2
 80008b2:	b29b      	uxth	r3, r3
  GPIO_InitStruct.Pin = LCD16x2_CfgParam.D4_PIN | LCD16x2_CfgParam.D5_PIN |
 80008b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD16x2_CfgParam.LCD_GPIO, &GPIO_InitStruct);
 80008c2:	4b26      	ldr	r3, [pc, #152]	; (800095c <LCD_Init+0x1dc>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f107 0214 	add.w	r2, r7, #20
 80008ca:	4611      	mov	r1, r2
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 fc1d 	bl	800110c <HAL_GPIO_Init>

  // The Init. Procedure As Described In The Datasheet
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, GPIO_PIN_RESET);
 80008d2:	4b22      	ldr	r3, [pc, #136]	; (800095c <LCD_Init+0x1dc>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a21      	ldr	r2, [pc, #132]	; (800095c <LCD_Init+0x1dc>)
 80008d8:	89d1      	ldrh	r1, [r2, #14]
 80008da:	2200      	movs	r2, #0
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 fdbf 	bl	8001460 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, GPIO_PIN_RESET);
 80008e2:	4b1e      	ldr	r3, [pc, #120]	; (800095c <LCD_Init+0x1dc>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a1d      	ldr	r2, [pc, #116]	; (800095c <LCD_Init+0x1dc>)
 80008e8:	8991      	ldrh	r1, [r2, #12]
 80008ea:	2200      	movs	r2, #0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 fdb7 	bl	8001460 <HAL_GPIO_WritePin>
    LCD_DATA(0x00);
 80008f2:	2000      	movs	r0, #0
 80008f4:	f7ff fe68 	bl	80005c8 <LCD_DATA>
    DWT_Delay_ms(150);
 80008f8:	2096      	movs	r0, #150	; 0x96
 80008fa:	f7ff fe3f 	bl	800057c <DWT_Delay_ms>
    LCD_CMD(0x03);
 80008fe:	2003      	movs	r0, #3
 8000900:	f7ff fec6 	bl	8000690 <LCD_CMD>
    DWT_Delay_ms(5);
 8000904:	2005      	movs	r0, #5
 8000906:	f7ff fe39 	bl	800057c <DWT_Delay_ms>
    LCD_CMD(0x03);
 800090a:	2003      	movs	r0, #3
 800090c:	f7ff fec0 	bl	8000690 <LCD_CMD>
    DWT_Delay_us(150);
 8000910:	2096      	movs	r0, #150	; 0x96
 8000912:	f7ff fe0b 	bl	800052c <DWT_Delay_us>
    LCD_CMD(0x03);
 8000916:	2003      	movs	r0, #3
 8000918:	f7ff feba 	bl	8000690 <LCD_CMD>
    LCD_CMD(0x02);
 800091c:	2002      	movs	r0, #2
 800091e:	f7ff feb7 	bl	8000690 <LCD_CMD>
    LCD_CMD(0x02);
 8000922:	2002      	movs	r0, #2
 8000924:	f7ff feb4 	bl	8000690 <LCD_CMD>
    LCD_CMD(0x08);
 8000928:	2008      	movs	r0, #8
 800092a:	f7ff feb1 	bl	8000690 <LCD_CMD>
    LCD_CMD(0x00);
 800092e:	2000      	movs	r0, #0
 8000930:	f7ff feae 	bl	8000690 <LCD_CMD>
    LCD_CMD(0x0C);
 8000934:	200c      	movs	r0, #12
 8000936:	f7ff feab 	bl	8000690 <LCD_CMD>
    LCD_CMD(0x00);
 800093a:	2000      	movs	r0, #0
 800093c:	f7ff fea8 	bl	8000690 <LCD_CMD>
    LCD_CMD(0x06);
 8000940:	2006      	movs	r0, #6
 8000942:	f7ff fea5 	bl	8000690 <LCD_CMD>
    LCD_CMD(0x00);
 8000946:	2000      	movs	r0, #0
 8000948:	f7ff fea2 	bl	8000690 <LCD_CMD>
    LCD_CMD(0x01);
 800094c:	2001      	movs	r0, #1
 800094e:	f7ff fe9f 	bl	8000690 <LCD_CMD>
}
 8000952:	bf00      	nop
 8000954:	3728      	adds	r7, #40	; 0x28
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	080034c8 	.word	0x080034c8
 8000960:	40021000 	.word	0x40021000
 8000964:	48000400 	.word	0x48000400
 8000968:	48000800 	.word	0x48000800
 800096c:	48000c00 	.word	0x48000c00

08000970 <LCD_Write_Char>:
void LCD_Write_Char(char Data)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	71fb      	strb	r3, [r7, #7]
   char Low4,High4;
   Low4  = Data & 0x0F;
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	f003 030f 	and.w	r3, r3, #15
 8000980:	73fb      	strb	r3, [r7, #15]
   High4 = Data & 0xF0;
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	f023 030f 	bic.w	r3, r3, #15
 8000988:	73bb      	strb	r3, [r7, #14]

   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, 1);
 800098a:	4b25      	ldr	r3, [pc, #148]	; (8000a20 <LCD_Write_Char+0xb0>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a24      	ldr	r2, [pc, #144]	; (8000a20 <LCD_Write_Char+0xb0>)
 8000990:	89d1      	ldrh	r1, [r2, #14]
 8000992:	2201      	movs	r2, #1
 8000994:	4618      	mov	r0, r3
 8000996:	f000 fd63 	bl	8001460 <HAL_GPIO_WritePin>

   LCD_DATA(High4>>4);
 800099a:	7bbb      	ldrb	r3, [r7, #14]
 800099c:	091b      	lsrs	r3, r3, #4
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fe11 	bl	80005c8 <LCD_DATA>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 80009a6:	4b1e      	ldr	r3, [pc, #120]	; (8000a20 <LCD_Write_Char+0xb0>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a1d      	ldr	r2, [pc, #116]	; (8000a20 <LCD_Write_Char+0xb0>)
 80009ac:	8991      	ldrh	r1, [r2, #12]
 80009ae:	2201      	movs	r2, #1
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 fd55 	bl	8001460 <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 80009b6:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <LCD_Write_Char+0xb0>)
 80009b8:	8a1b      	ldrh	r3, [r3, #16]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fdb6 	bl	800052c <DWT_Delay_us>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 80009c0:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <LCD_Write_Char+0xb0>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a16      	ldr	r2, [pc, #88]	; (8000a20 <LCD_Write_Char+0xb0>)
 80009c6:	8991      	ldrh	r1, [r2, #12]
 80009c8:	2200      	movs	r2, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 fd48 	bl	8001460 <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 80009d0:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <LCD_Write_Char+0xb0>)
 80009d2:	8a1b      	ldrh	r3, [r3, #16]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fda9 	bl	800052c <DWT_Delay_us>

   LCD_DATA(Low4);
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fdf3 	bl	80005c8 <LCD_DATA>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <LCD_Write_Char+0xb0>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a0e      	ldr	r2, [pc, #56]	; (8000a20 <LCD_Write_Char+0xb0>)
 80009e8:	8991      	ldrh	r1, [r2, #12]
 80009ea:	2201      	movs	r2, #1
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 fd37 	bl	8001460 <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <LCD_Write_Char+0xb0>)
 80009f4:	8a1b      	ldrh	r3, [r3, #16]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fd98 	bl	800052c <DWT_Delay_us>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <LCD_Write_Char+0xb0>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a07      	ldr	r2, [pc, #28]	; (8000a20 <LCD_Write_Char+0xb0>)
 8000a02:	8991      	ldrh	r1, [r2, #12]
 8000a04:	2200      	movs	r2, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 fd2a 	bl	8001460 <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <LCD_Write_Char+0xb0>)
 8000a0e:	8a1b      	ldrh	r3, [r3, #16]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fd8b 	bl	800052c <DWT_Delay_us>
}
 8000a16:	bf00      	nop
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	080034c8 	.word	0x080034c8

08000a24 <LCD_Write_String>:
void LCD_Write_String(char *str)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
    int i;
    for(i=0;str[i]!='\0';i++)
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	e009      	b.n	8000a46 <LCD_Write_String+0x22>
       LCD_Write_Char(str[i]);
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	4413      	add	r3, r2
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff ff98 	bl	8000970 <LCD_Write_Char>
    for(i=0;str[i]!='\0';i++)
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	3301      	adds	r3, #1
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d1ef      	bne.n	8000a32 <LCD_Write_String+0xe>
}
 8000a52:	bf00      	nop
 8000a54:	bf00      	nop
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a60:	f000 f9f2 	bl	8000e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a64:	f000 f81c 	bl	8000aa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a68:	f000 f89c 	bl	8000ba4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a6c:	f000 f86a 	bl	8000b44 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 8000a70:	f7ff fe86 	bl	8000780 <LCD_Init>
  LCD_Clear();
 8000a74:	f7ff fe3e 	bl	80006f4 <LCD_Clear>
  LCD_Set_Cursor(1, 1);
 8000a78:	2101      	movs	r1, #1
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	f7ff fe47 	bl	800070e <LCD_Set_Cursor>
  LCD_Write_String("Bon appetit");
 8000a80:	4805      	ldr	r0, [pc, #20]	; (8000a98 <main+0x3c>)
 8000a82:	f7ff ffcf 	bl	8000a24 <LCD_Write_String>
  LCD_Set_Cursor(2, 1);
 8000a86:	2101      	movs	r1, #1
 8000a88:	2002      	movs	r0, #2
 8000a8a:	f7ff fe40 	bl	800070e <LCD_Set_Cursor>
  LCD_Write_String("   Bouille   ");
 8000a8e:	4803      	ldr	r0, [pc, #12]	; (8000a9c <main+0x40>)
 8000a90:	f7ff ffc8 	bl	8000a24 <LCD_Write_String>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <main+0x38>
 8000a96:	bf00      	nop
 8000a98:	080034ac 	.word	0x080034ac
 8000a9c:	080034b8 	.word	0x080034b8

08000aa0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b096      	sub	sp, #88	; 0x58
 8000aa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	2244      	movs	r2, #68	; 0x44
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f002 fce8 	bl	8003484 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ab4:	463b      	mov	r3, r7
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
 8000ac0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ac2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ac6:	f000 fcf1 	bl	80014ac <HAL_PWREx_ControlVoltageScaling>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ad0:	f000 f8ce 	bl	8000c70 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000adc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ade:	2310      	movs	r3, #16
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000aea:	2301      	movs	r3, #1
 8000aec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000aee:	230a      	movs	r3, #10
 8000af0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000af2:	2307      	movs	r3, #7
 8000af4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000af6:	2302      	movs	r3, #2
 8000af8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000afa:	2302      	movs	r3, #2
 8000afc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 fd28 	bl	8001558 <HAL_RCC_OscConfig>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b0e:	f000 f8af 	bl	8000c70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000b12:	230f      	movs	r3, #15
 8000b14:	603b      	str	r3, [r7, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b16:	2303      	movs	r3, #3
 8000b18:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b26:	463b      	mov	r3, r7
 8000b28:	2104      	movs	r1, #4
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f001 f8f0 	bl	8001d10 <HAL_RCC_ClockConfig>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b36:	f000 f89b 	bl	8000c70 <Error_Handler>
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	3758      	adds	r7, #88	; 0x58
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b4a:	4a15      	ldr	r2, [pc, #84]	; (8000ba0 <MX_USART2_UART_Init+0x5c>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7a:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b88:	f001 ffa2 	bl	8002ad0 <HAL_UART_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b92:	f000 f86d 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000028 	.word	0x20000028
 8000ba0:	40004400 	.word	0x40004400

08000ba4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bba:	4b2b      	ldr	r3, [pc, #172]	; (8000c68 <MX_GPIO_Init+0xc4>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	4a2a      	ldr	r2, [pc, #168]	; (8000c68 <MX_GPIO_Init+0xc4>)
 8000bc0:	f043 0304 	orr.w	r3, r3, #4
 8000bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc6:	4b28      	ldr	r3, [pc, #160]	; (8000c68 <MX_GPIO_Init+0xc4>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	f003 0304 	and.w	r3, r3, #4
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bd2:	4b25      	ldr	r3, [pc, #148]	; (8000c68 <MX_GPIO_Init+0xc4>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	4a24      	ldr	r2, [pc, #144]	; (8000c68 <MX_GPIO_Init+0xc4>)
 8000bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bde:	4b22      	ldr	r3, [pc, #136]	; (8000c68 <MX_GPIO_Init+0xc4>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	4b1f      	ldr	r3, [pc, #124]	; (8000c68 <MX_GPIO_Init+0xc4>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bee:	4a1e      	ldr	r2, [pc, #120]	; (8000c68 <MX_GPIO_Init+0xc4>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf6:	4b1c      	ldr	r3, [pc, #112]	; (8000c68 <MX_GPIO_Init+0xc4>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <MX_GPIO_Init+0xc4>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c06:	4a18      	ldr	r2, [pc, #96]	; (8000c68 <MX_GPIO_Init+0xc4>)
 8000c08:	f043 0302 	orr.w	r3, r3, #2
 8000c0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c0e:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <MX_GPIO_Init+0xc4>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2120      	movs	r1, #32
 8000c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c22:	f000 fc1d 	bl	8001460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c2c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480b      	ldr	r0, [pc, #44]	; (8000c6c <MX_GPIO_Init+0xc8>)
 8000c3e:	f000 fa65 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c42:	2320      	movs	r3, #32
 8000c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c46:	2301      	movs	r3, #1
 8000c48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5c:	f000 fa56 	bl	800110c <HAL_GPIO_Init>

}
 8000c60:	bf00      	nop
 8000c62:	3728      	adds	r7, #40	; 0x28
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	48000800 	.word	0x48000800

08000c70 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c74:	b672      	cpsid	i
}
 8000c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <Error_Handler+0x8>
	...

08000c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c82:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <HAL_MspInit+0x44>)
 8000c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c86:	4a0e      	ldr	r2, [pc, #56]	; (8000cc0 <HAL_MspInit+0x44>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <HAL_MspInit+0x44>)
 8000c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <HAL_MspInit+0x44>)
 8000c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c9e:	4a08      	ldr	r2, [pc, #32]	; (8000cc0 <HAL_MspInit+0x44>)
 8000ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_MspInit+0x44>)
 8000ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	40021000 	.word	0x40021000

08000cc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b0ac      	sub	sp, #176	; 0xb0
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	2288      	movs	r2, #136	; 0x88
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f002 fbcd 	bl	8003484 <memset>
  if(huart->Instance==USART2)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a21      	ldr	r2, [pc, #132]	; (8000d74 <HAL_UART_MspInit+0xb0>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d13b      	bne.n	8000d6c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	4618      	mov	r0, r3
 8000d02:	f001 fa29 	bl	8002158 <HAL_RCCEx_PeriphCLKConfig>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d0c:	f7ff ffb0 	bl	8000c70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d10:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <HAL_UART_MspInit+0xb4>)
 8000d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d14:	4a18      	ldr	r2, [pc, #96]	; (8000d78 <HAL_UART_MspInit+0xb4>)
 8000d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d1a:	6593      	str	r3, [r2, #88]	; 0x58
 8000d1c:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <HAL_UART_MspInit+0xb4>)
 8000d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d28:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <HAL_UART_MspInit+0xb4>)
 8000d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2c:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <HAL_UART_MspInit+0xb4>)
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d34:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <HAL_UART_MspInit+0xb4>)
 8000d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d38:	f003 0301 	and.w	r3, r3, #1
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d40:	230c      	movs	r3, #12
 8000d42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d52:	2303      	movs	r3, #3
 8000d54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d58:	2307      	movs	r3, #7
 8000d5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d62:	4619      	mov	r1, r3
 8000d64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d68:	f000 f9d0 	bl	800110c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d6c:	bf00      	nop
 8000d6e:	37b0      	adds	r7, #176	; 0xb0
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40004400 	.word	0x40004400
 8000d78:	40021000 	.word	0x40021000

08000d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <NMI_Handler+0x4>

08000d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <HardFault_Handler+0x4>

08000d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <MemManage_Handler+0x4>

08000d8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <BusFault_Handler+0x4>

08000d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <UsageFault_Handler+0x4>

08000d9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc8:	f000 f89a 	bl	8000f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <SystemInit+0x20>)
 8000dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dda:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <SystemInit+0x20>)
 8000ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000df4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e2c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000df8:	f7ff ffea 	bl	8000dd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dfc:	480c      	ldr	r0, [pc, #48]	; (8000e30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dfe:	490d      	ldr	r1, [pc, #52]	; (8000e34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e00:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <LoopForever+0xe>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e04:	e002      	b.n	8000e0c <LoopCopyDataInit>

08000e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0a:	3304      	adds	r3, #4

08000e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e10:	d3f9      	bcc.n	8000e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e12:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e14:	4c0a      	ldr	r4, [pc, #40]	; (8000e40 <LoopForever+0x16>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e18:	e001      	b.n	8000e1e <LoopFillZerobss>

08000e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e1c:	3204      	adds	r2, #4

08000e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e20:	d3fb      	bcc.n	8000e1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e22:	f002 fb0b 	bl	800343c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e26:	f7ff fe19 	bl	8000a5c <main>

08000e2a <LoopForever>:

LoopForever:
    b LoopForever
 8000e2a:	e7fe      	b.n	8000e2a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e2c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e34:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e38:	08003534 	.word	0x08003534
  ldr r2, =_sbss
 8000e3c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e40:	200000b0 	.word	0x200000b0

08000e44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e44:	e7fe      	b.n	8000e44 <ADC1_2_IRQHandler>
	...

08000e48 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <HAL_Init+0x3c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a0b      	ldr	r2, [pc, #44]	; (8000e84 <HAL_Init+0x3c>)
 8000e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e5c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5e:	2003      	movs	r0, #3
 8000e60:	f000 f920 	bl	80010a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e64:	2000      	movs	r0, #0
 8000e66:	f000 f80f 	bl	8000e88 <HAL_InitTick>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d002      	beq.n	8000e76 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	71fb      	strb	r3, [r7, #7]
 8000e74:	e001      	b.n	8000e7a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e76:	f7ff ff01 	bl	8000c7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40022000 	.word	0x40022000

08000e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e90:	2300      	movs	r3, #0
 8000e92:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e94:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <HAL_InitTick+0x6c>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d023      	beq.n	8000ee4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e9c:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <HAL_InitTick+0x70>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <HAL_InitTick+0x6c>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f91d 	bl	80010f2 <HAL_SYSTICK_Config>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d10f      	bne.n	8000ede <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b0f      	cmp	r3, #15
 8000ec2:	d809      	bhi.n	8000ed8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f000 f8f5 	bl	80010ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ed0:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <HAL_InitTick+0x74>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6013      	str	r3, [r2, #0]
 8000ed6:	e007      	b.n	8000ee8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	73fb      	strb	r3, [r7, #15]
 8000edc:	e004      	b.n	8000ee8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	73fb      	strb	r3, [r7, #15]
 8000ee2:	e001      	b.n	8000ee8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	20000004 	.word	0x20000004

08000f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_IncTick+0x20>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_IncTick+0x24>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <HAL_IncTick+0x24>)
 8000f12:	6013      	str	r3, [r2, #0]
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000008 	.word	0x20000008
 8000f24:	200000ac 	.word	0x200000ac

08000f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f2c:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <HAL_GetTick+0x14>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	200000ac 	.word	0x200000ac

08000f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <__NVIC_SetPriorityGrouping+0x44>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f72:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <__NVIC_SetPriorityGrouping+0x44>)
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	60d3      	str	r3, [r2, #12]
}
 8000f78:	bf00      	nop
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	0a1b      	lsrs	r3, r3, #8
 8000f92:	f003 0307 	and.w	r3, r3, #7
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	6039      	str	r1, [r7, #0]
 8000fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	db0a      	blt.n	8000fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	490c      	ldr	r1, [pc, #48]	; (8000ff0 <__NVIC_SetPriority+0x4c>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	0112      	lsls	r2, r2, #4
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fcc:	e00a      	b.n	8000fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4908      	ldr	r1, [pc, #32]	; (8000ff4 <__NVIC_SetPriority+0x50>)
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	f003 030f 	and.w	r3, r3, #15
 8000fda:	3b04      	subs	r3, #4
 8000fdc:	0112      	lsls	r2, r2, #4
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	761a      	strb	r2, [r3, #24]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000e100 	.word	0xe000e100
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b089      	sub	sp, #36	; 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f1c3 0307 	rsb	r3, r3, #7
 8001012:	2b04      	cmp	r3, #4
 8001014:	bf28      	it	cs
 8001016:	2304      	movcs	r3, #4
 8001018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3304      	adds	r3, #4
 800101e:	2b06      	cmp	r3, #6
 8001020:	d902      	bls.n	8001028 <NVIC_EncodePriority+0x30>
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3b03      	subs	r3, #3
 8001026:	e000      	b.n	800102a <NVIC_EncodePriority+0x32>
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	f04f 32ff 	mov.w	r2, #4294967295
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43da      	mvns	r2, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	401a      	ands	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001040:	f04f 31ff 	mov.w	r1, #4294967295
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43d9      	mvns	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	4313      	orrs	r3, r2
         );
}
 8001052:	4618      	mov	r0, r3
 8001054:	3724      	adds	r7, #36	; 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001070:	d301      	bcc.n	8001076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001072:	2301      	movs	r3, #1
 8001074:	e00f      	b.n	8001096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001076:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <SysTick_Config+0x40>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107e:	210f      	movs	r1, #15
 8001080:	f04f 30ff 	mov.w	r0, #4294967295
 8001084:	f7ff ff8e 	bl	8000fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <SysTick_Config+0x40>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108e:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <SysTick_Config+0x40>)
 8001090:	2207      	movs	r2, #7
 8001092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	e000e010 	.word	0xe000e010

080010a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ff47 	bl	8000f40 <__NVIC_SetPriorityGrouping>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b086      	sub	sp, #24
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010cc:	f7ff ff5c 	bl	8000f88 <__NVIC_GetPriorityGrouping>
 80010d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	68b9      	ldr	r1, [r7, #8]
 80010d6:	6978      	ldr	r0, [r7, #20]
 80010d8:	f7ff ff8e 	bl	8000ff8 <NVIC_EncodePriority>
 80010dc:	4602      	mov	r2, r0
 80010de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e2:	4611      	mov	r1, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff5d 	bl	8000fa4 <__NVIC_SetPriority>
}
 80010ea:	bf00      	nop
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ffb0 	bl	8001060 <SysTick_Config>
 8001100:	4603      	mov	r3, r0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800110c:	b480      	push	{r7}
 800110e:	b087      	sub	sp, #28
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800111a:	e17f      	b.n	800141c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	2101      	movs	r1, #1
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	fa01 f303 	lsl.w	r3, r1, r3
 8001128:	4013      	ands	r3, r2
 800112a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	f000 8171 	beq.w	8001416 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b01      	cmp	r3, #1
 800113e:	d005      	beq.n	800114c <HAL_GPIO_Init+0x40>
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d130      	bne.n	80011ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	2203      	movs	r2, #3
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001182:	2201      	movs	r2, #1
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	091b      	lsrs	r3, r3, #4
 8001198:	f003 0201 	and.w	r2, r3, #1
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 0303 	and.w	r3, r3, #3
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	d118      	bne.n	80011ec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011c0:	2201      	movs	r2, #1
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	08db      	lsrs	r3, r3, #3
 80011d6:	f003 0201 	and.w	r2, r3, #1
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	2b03      	cmp	r3, #3
 80011f6:	d017      	beq.n	8001228 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	2203      	movs	r2, #3
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d123      	bne.n	800127c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	08da      	lsrs	r2, r3, #3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3208      	adds	r2, #8
 800123c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001240:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	f003 0307 	and.w	r3, r3, #7
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	220f      	movs	r2, #15
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	691a      	ldr	r2, [r3, #16]
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	08da      	lsrs	r2, r3, #3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3208      	adds	r2, #8
 8001276:	6939      	ldr	r1, [r7, #16]
 8001278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0203 	and.w	r2, r3, #3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 80ac 	beq.w	8001416 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	4b5f      	ldr	r3, [pc, #380]	; (800143c <HAL_GPIO_Init+0x330>)
 80012c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c2:	4a5e      	ldr	r2, [pc, #376]	; (800143c <HAL_GPIO_Init+0x330>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6613      	str	r3, [r2, #96]	; 0x60
 80012ca:	4b5c      	ldr	r3, [pc, #368]	; (800143c <HAL_GPIO_Init+0x330>)
 80012cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012d6:	4a5a      	ldr	r2, [pc, #360]	; (8001440 <HAL_GPIO_Init+0x334>)
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	089b      	lsrs	r3, r3, #2
 80012dc:	3302      	adds	r3, #2
 80012de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	f003 0303 	and.w	r3, r3, #3
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	220f      	movs	r2, #15
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001300:	d025      	beq.n	800134e <HAL_GPIO_Init+0x242>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4f      	ldr	r2, [pc, #316]	; (8001444 <HAL_GPIO_Init+0x338>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d01f      	beq.n	800134a <HAL_GPIO_Init+0x23e>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a4e      	ldr	r2, [pc, #312]	; (8001448 <HAL_GPIO_Init+0x33c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d019      	beq.n	8001346 <HAL_GPIO_Init+0x23a>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a4d      	ldr	r2, [pc, #308]	; (800144c <HAL_GPIO_Init+0x340>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d013      	beq.n	8001342 <HAL_GPIO_Init+0x236>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4c      	ldr	r2, [pc, #304]	; (8001450 <HAL_GPIO_Init+0x344>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d00d      	beq.n	800133e <HAL_GPIO_Init+0x232>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4b      	ldr	r2, [pc, #300]	; (8001454 <HAL_GPIO_Init+0x348>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d007      	beq.n	800133a <HAL_GPIO_Init+0x22e>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4a      	ldr	r2, [pc, #296]	; (8001458 <HAL_GPIO_Init+0x34c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d101      	bne.n	8001336 <HAL_GPIO_Init+0x22a>
 8001332:	2306      	movs	r3, #6
 8001334:	e00c      	b.n	8001350 <HAL_GPIO_Init+0x244>
 8001336:	2307      	movs	r3, #7
 8001338:	e00a      	b.n	8001350 <HAL_GPIO_Init+0x244>
 800133a:	2305      	movs	r3, #5
 800133c:	e008      	b.n	8001350 <HAL_GPIO_Init+0x244>
 800133e:	2304      	movs	r3, #4
 8001340:	e006      	b.n	8001350 <HAL_GPIO_Init+0x244>
 8001342:	2303      	movs	r3, #3
 8001344:	e004      	b.n	8001350 <HAL_GPIO_Init+0x244>
 8001346:	2302      	movs	r3, #2
 8001348:	e002      	b.n	8001350 <HAL_GPIO_Init+0x244>
 800134a:	2301      	movs	r3, #1
 800134c:	e000      	b.n	8001350 <HAL_GPIO_Init+0x244>
 800134e:	2300      	movs	r3, #0
 8001350:	697a      	ldr	r2, [r7, #20]
 8001352:	f002 0203 	and.w	r2, r2, #3
 8001356:	0092      	lsls	r2, r2, #2
 8001358:	4093      	lsls	r3, r2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001360:	4937      	ldr	r1, [pc, #220]	; (8001440 <HAL_GPIO_Init+0x334>)
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	089b      	lsrs	r3, r3, #2
 8001366:	3302      	adds	r3, #2
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800136e:	4b3b      	ldr	r3, [pc, #236]	; (800145c <HAL_GPIO_Init+0x350>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	43db      	mvns	r3, r3
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4313      	orrs	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001392:	4a32      	ldr	r2, [pc, #200]	; (800145c <HAL_GPIO_Init+0x350>)
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001398:	4b30      	ldr	r3, [pc, #192]	; (800145c <HAL_GPIO_Init+0x350>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013bc:	4a27      	ldr	r2, [pc, #156]	; (800145c <HAL_GPIO_Init+0x350>)
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013c2:	4b26      	ldr	r3, [pc, #152]	; (800145c <HAL_GPIO_Init+0x350>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013e6:	4a1d      	ldr	r2, [pc, #116]	; (800145c <HAL_GPIO_Init+0x350>)
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013ec:	4b1b      	ldr	r3, [pc, #108]	; (800145c <HAL_GPIO_Init+0x350>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	43db      	mvns	r3, r3
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	4313      	orrs	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001410:	4a12      	ldr	r2, [pc, #72]	; (800145c <HAL_GPIO_Init+0x350>)
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	3301      	adds	r3, #1
 800141a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	fa22 f303 	lsr.w	r3, r2, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	f47f ae78 	bne.w	800111c <HAL_GPIO_Init+0x10>
  }
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	371c      	adds	r7, #28
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40021000 	.word	0x40021000
 8001440:	40010000 	.word	0x40010000
 8001444:	48000400 	.word	0x48000400
 8001448:	48000800 	.word	0x48000800
 800144c:	48000c00 	.word	0x48000c00
 8001450:	48001000 	.word	0x48001000
 8001454:	48001400 	.word	0x48001400
 8001458:	48001800 	.word	0x48001800
 800145c:	40010400 	.word	0x40010400

08001460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	807b      	strh	r3, [r7, #2]
 800146c:	4613      	mov	r3, r2
 800146e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001470:	787b      	ldrb	r3, [r7, #1]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001476:	887a      	ldrh	r2, [r7, #2]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800147c:	e002      	b.n	8001484 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800147e:	887a      	ldrh	r2, [r7, #2]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001494:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40007000 	.word	0x40007000

080014ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014ba:	d130      	bne.n	800151e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80014bc:	4b23      	ldr	r3, [pc, #140]	; (800154c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014c8:	d038      	beq.n	800153c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014ca:	4b20      	ldr	r3, [pc, #128]	; (800154c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014d2:	4a1e      	ldr	r2, [pc, #120]	; (800154c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014da:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2232      	movs	r2, #50	; 0x32
 80014e0:	fb02 f303 	mul.w	r3, r2, r3
 80014e4:	4a1b      	ldr	r2, [pc, #108]	; (8001554 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014e6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ea:	0c9b      	lsrs	r3, r3, #18
 80014ec:	3301      	adds	r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014f0:	e002      	b.n	80014f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014f8:	4b14      	ldr	r3, [pc, #80]	; (800154c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014fa:	695b      	ldr	r3, [r3, #20]
 80014fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001504:	d102      	bne.n	800150c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1f2      	bne.n	80014f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800150e:	695b      	ldr	r3, [r3, #20]
 8001510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001518:	d110      	bne.n	800153c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e00f      	b.n	800153e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800151e:	4b0b      	ldr	r3, [pc, #44]	; (800154c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800152a:	d007      	beq.n	800153c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001534:	4a05      	ldr	r2, [pc, #20]	; (800154c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001536:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800153a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40007000 	.word	0x40007000
 8001550:	20000000 	.word	0x20000000
 8001554:	431bde83 	.word	0x431bde83

08001558 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e3ca      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800156a:	4b97      	ldr	r3, [pc, #604]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 030c 	and.w	r3, r3, #12
 8001572:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001574:	4b94      	ldr	r3, [pc, #592]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	f003 0303 	and.w	r3, r3, #3
 800157c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0310 	and.w	r3, r3, #16
 8001586:	2b00      	cmp	r3, #0
 8001588:	f000 80e4 	beq.w	8001754 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d007      	beq.n	80015a2 <HAL_RCC_OscConfig+0x4a>
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	2b0c      	cmp	r3, #12
 8001596:	f040 808b 	bne.w	80016b0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	2b01      	cmp	r3, #1
 800159e:	f040 8087 	bne.w	80016b0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015a2:	4b89      	ldr	r3, [pc, #548]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d005      	beq.n	80015ba <HAL_RCC_OscConfig+0x62>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e3a2      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a1a      	ldr	r2, [r3, #32]
 80015be:	4b82      	ldr	r3, [pc, #520]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0308 	and.w	r3, r3, #8
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d004      	beq.n	80015d4 <HAL_RCC_OscConfig+0x7c>
 80015ca:	4b7f      	ldr	r3, [pc, #508]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015d2:	e005      	b.n	80015e0 <HAL_RCC_OscConfig+0x88>
 80015d4:	4b7c      	ldr	r3, [pc, #496]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80015d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015da:	091b      	lsrs	r3, r3, #4
 80015dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d223      	bcs.n	800162c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f000 fd55 	bl	8002098 <RCC_SetFlashLatencyFromMSIRange>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e383      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015f8:	4b73      	ldr	r3, [pc, #460]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a72      	ldr	r2, [pc, #456]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80015fe:	f043 0308 	orr.w	r3, r3, #8
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	4b70      	ldr	r3, [pc, #448]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a1b      	ldr	r3, [r3, #32]
 8001610:	496d      	ldr	r1, [pc, #436]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001612:	4313      	orrs	r3, r2
 8001614:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001616:	4b6c      	ldr	r3, [pc, #432]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	021b      	lsls	r3, r3, #8
 8001624:	4968      	ldr	r1, [pc, #416]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001626:	4313      	orrs	r3, r2
 8001628:	604b      	str	r3, [r1, #4]
 800162a:	e025      	b.n	8001678 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800162c:	4b66      	ldr	r3, [pc, #408]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a65      	ldr	r2, [pc, #404]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001632:	f043 0308 	orr.w	r3, r3, #8
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	4b63      	ldr	r3, [pc, #396]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	4960      	ldr	r1, [pc, #384]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001646:	4313      	orrs	r3, r2
 8001648:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800164a:	4b5f      	ldr	r3, [pc, #380]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	021b      	lsls	r3, r3, #8
 8001658:	495b      	ldr	r1, [pc, #364]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 800165a:	4313      	orrs	r3, r2
 800165c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d109      	bne.n	8001678 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	4618      	mov	r0, r3
 800166a:	f000 fd15 	bl	8002098 <RCC_SetFlashLatencyFromMSIRange>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e343      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001678:	f000 fc4a 	bl	8001f10 <HAL_RCC_GetSysClockFreq>
 800167c:	4602      	mov	r2, r0
 800167e:	4b52      	ldr	r3, [pc, #328]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	091b      	lsrs	r3, r3, #4
 8001684:	f003 030f 	and.w	r3, r3, #15
 8001688:	4950      	ldr	r1, [pc, #320]	; (80017cc <HAL_RCC_OscConfig+0x274>)
 800168a:	5ccb      	ldrb	r3, [r1, r3]
 800168c:	f003 031f 	and.w	r3, r3, #31
 8001690:	fa22 f303 	lsr.w	r3, r2, r3
 8001694:	4a4e      	ldr	r2, [pc, #312]	; (80017d0 <HAL_RCC_OscConfig+0x278>)
 8001696:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001698:	4b4e      	ldr	r3, [pc, #312]	; (80017d4 <HAL_RCC_OscConfig+0x27c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fbf3 	bl	8000e88 <HAL_InitTick>
 80016a2:	4603      	mov	r3, r0
 80016a4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d052      	beq.n	8001752 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	e327      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d032      	beq.n	800171e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016b8:	4b43      	ldr	r3, [pc, #268]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a42      	ldr	r2, [pc, #264]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016c4:	f7ff fc30 	bl	8000f28 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016cc:	f7ff fc2c 	bl	8000f28 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e310      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016de:	4b3a      	ldr	r3, [pc, #232]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016ea:	4b37      	ldr	r3, [pc, #220]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a36      	ldr	r2, [pc, #216]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80016f0:	f043 0308 	orr.w	r3, r3, #8
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	4b34      	ldr	r3, [pc, #208]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a1b      	ldr	r3, [r3, #32]
 8001702:	4931      	ldr	r1, [pc, #196]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001704:	4313      	orrs	r3, r2
 8001706:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001708:	4b2f      	ldr	r3, [pc, #188]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	69db      	ldr	r3, [r3, #28]
 8001714:	021b      	lsls	r3, r3, #8
 8001716:	492c      	ldr	r1, [pc, #176]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001718:	4313      	orrs	r3, r2
 800171a:	604b      	str	r3, [r1, #4]
 800171c:	e01a      	b.n	8001754 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800171e:	4b2a      	ldr	r3, [pc, #168]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a29      	ldr	r2, [pc, #164]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001724:	f023 0301 	bic.w	r3, r3, #1
 8001728:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800172a:	f7ff fbfd 	bl	8000f28 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001732:	f7ff fbf9 	bl	8000f28 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e2dd      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001744:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1f0      	bne.n	8001732 <HAL_RCC_OscConfig+0x1da>
 8001750:	e000      	b.n	8001754 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001752:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	2b00      	cmp	r3, #0
 800175e:	d074      	beq.n	800184a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	2b08      	cmp	r3, #8
 8001764:	d005      	beq.n	8001772 <HAL_RCC_OscConfig+0x21a>
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	2b0c      	cmp	r3, #12
 800176a:	d10e      	bne.n	800178a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	2b03      	cmp	r3, #3
 8001770:	d10b      	bne.n	800178a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d064      	beq.n	8001848 <HAL_RCC_OscConfig+0x2f0>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d160      	bne.n	8001848 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e2ba      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001792:	d106      	bne.n	80017a2 <HAL_RCC_OscConfig+0x24a>
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a0b      	ldr	r2, [pc, #44]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 800179a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	e026      	b.n	80017f0 <HAL_RCC_OscConfig+0x298>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017aa:	d115      	bne.n	80017d8 <HAL_RCC_OscConfig+0x280>
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80017b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a02      	ldr	r2, [pc, #8]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80017be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	e014      	b.n	80017f0 <HAL_RCC_OscConfig+0x298>
 80017c6:	bf00      	nop
 80017c8:	40021000 	.word	0x40021000
 80017cc:	080034dc 	.word	0x080034dc
 80017d0:	20000000 	.word	0x20000000
 80017d4:	20000004 	.word	0x20000004
 80017d8:	4ba0      	ldr	r3, [pc, #640]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a9f      	ldr	r2, [pc, #636]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80017de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	4b9d      	ldr	r3, [pc, #628]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a9c      	ldr	r2, [pc, #624]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80017ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d013      	beq.n	8001820 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f8:	f7ff fb96 	bl	8000f28 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001800:	f7ff fb92 	bl	8000f28 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b64      	cmp	r3, #100	; 0x64
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e276      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001812:	4b92      	ldr	r3, [pc, #584]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f0      	beq.n	8001800 <HAL_RCC_OscConfig+0x2a8>
 800181e:	e014      	b.n	800184a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001820:	f7ff fb82 	bl	8000f28 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001828:	f7ff fb7e 	bl	8000f28 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b64      	cmp	r3, #100	; 0x64
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e262      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800183a:	4b88      	ldr	r3, [pc, #544]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f0      	bne.n	8001828 <HAL_RCC_OscConfig+0x2d0>
 8001846:	e000      	b.n	800184a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d060      	beq.n	8001918 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	2b04      	cmp	r3, #4
 800185a:	d005      	beq.n	8001868 <HAL_RCC_OscConfig+0x310>
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	2b0c      	cmp	r3, #12
 8001860:	d119      	bne.n	8001896 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	2b02      	cmp	r3, #2
 8001866:	d116      	bne.n	8001896 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001868:	4b7c      	ldr	r3, [pc, #496]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001870:	2b00      	cmp	r3, #0
 8001872:	d005      	beq.n	8001880 <HAL_RCC_OscConfig+0x328>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e23f      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001880:	4b76      	ldr	r3, [pc, #472]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	061b      	lsls	r3, r3, #24
 800188e:	4973      	ldr	r1, [pc, #460]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001890:	4313      	orrs	r3, r2
 8001892:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001894:	e040      	b.n	8001918 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d023      	beq.n	80018e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800189e:	4b6f      	ldr	r3, [pc, #444]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a6e      	ldr	r2, [pc, #440]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80018a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018aa:	f7ff fb3d 	bl	8000f28 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b2:	f7ff fb39 	bl	8000f28 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e21d      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018c4:	4b65      	ldr	r3, [pc, #404]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0f0      	beq.n	80018b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d0:	4b62      	ldr	r3, [pc, #392]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	061b      	lsls	r3, r3, #24
 80018de:	495f      	ldr	r1, [pc, #380]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
 80018e4:	e018      	b.n	8001918 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018e6:	4b5d      	ldr	r3, [pc, #372]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a5c      	ldr	r2, [pc, #368]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80018ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f2:	f7ff fb19 	bl	8000f28 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018fa:	f7ff fb15 	bl	8000f28 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e1f9      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800190c:	4b53      	ldr	r3, [pc, #332]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1f0      	bne.n	80018fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	2b00      	cmp	r3, #0
 8001922:	d03c      	beq.n	800199e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d01c      	beq.n	8001966 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800192c:	4b4b      	ldr	r3, [pc, #300]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 800192e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001932:	4a4a      	ldr	r2, [pc, #296]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193c:	f7ff faf4 	bl	8000f28 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001944:	f7ff faf0 	bl	8000f28 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e1d4      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001956:	4b41      	ldr	r3, [pc, #260]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001958:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0ef      	beq.n	8001944 <HAL_RCC_OscConfig+0x3ec>
 8001964:	e01b      	b.n	800199e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001966:	4b3d      	ldr	r3, [pc, #244]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001968:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800196c:	4a3b      	ldr	r2, [pc, #236]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 800196e:	f023 0301 	bic.w	r3, r3, #1
 8001972:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001976:	f7ff fad7 	bl	8000f28 <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800197e:	f7ff fad3 	bl	8000f28 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e1b7      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001990:	4b32      	ldr	r3, [pc, #200]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1ef      	bne.n	800197e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 80a6 	beq.w	8001af8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ac:	2300      	movs	r3, #0
 80019ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019b0:	4b2a      	ldr	r3, [pc, #168]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80019b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d10d      	bne.n	80019d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019bc:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80019be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c0:	4a26      	ldr	r2, [pc, #152]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80019c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c6:	6593      	str	r3, [r2, #88]	; 0x58
 80019c8:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80019ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019d4:	2301      	movs	r3, #1
 80019d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019d8:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <HAL_RCC_OscConfig+0x508>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d118      	bne.n	8001a16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019e4:	4b1e      	ldr	r3, [pc, #120]	; (8001a60 <HAL_RCC_OscConfig+0x508>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a1d      	ldr	r2, [pc, #116]	; (8001a60 <HAL_RCC_OscConfig+0x508>)
 80019ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019f0:	f7ff fa9a 	bl	8000f28 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019f8:	f7ff fa96 	bl	8000f28 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e17a      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a0a:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <HAL_RCC_OscConfig+0x508>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d108      	bne.n	8001a30 <HAL_RCC_OscConfig+0x4d8>
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a24:	4a0d      	ldr	r2, [pc, #52]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a2e:	e029      	b.n	8001a84 <HAL_RCC_OscConfig+0x52c>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b05      	cmp	r3, #5
 8001a36:	d115      	bne.n	8001a64 <HAL_RCC_OscConfig+0x50c>
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a3e:	4a07      	ldr	r2, [pc, #28]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001a40:	f043 0304 	orr.w	r3, r3, #4
 8001a44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a48:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a4e:	4a03      	ldr	r2, [pc, #12]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a58:	e014      	b.n	8001a84 <HAL_RCC_OscConfig+0x52c>
 8001a5a:	bf00      	nop
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40007000 	.word	0x40007000
 8001a64:	4b9c      	ldr	r3, [pc, #624]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a6a:	4a9b      	ldr	r2, [pc, #620]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001a6c:	f023 0301 	bic.w	r3, r3, #1
 8001a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a74:	4b98      	ldr	r3, [pc, #608]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a7a:	4a97      	ldr	r2, [pc, #604]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001a7c:	f023 0304 	bic.w	r3, r3, #4
 8001a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d016      	beq.n	8001aba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8c:	f7ff fa4c 	bl	8000f28 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a92:	e00a      	b.n	8001aaa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a94:	f7ff fa48 	bl	8000f28 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e12a      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aaa:	4b8b      	ldr	r3, [pc, #556]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0ed      	beq.n	8001a94 <HAL_RCC_OscConfig+0x53c>
 8001ab8:	e015      	b.n	8001ae6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aba:	f7ff fa35 	bl	8000f28 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ac0:	e00a      	b.n	8001ad8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac2:	f7ff fa31 	bl	8000f28 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e113      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ad8:	4b7f      	ldr	r3, [pc, #508]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1ed      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ae6:	7ffb      	ldrb	r3, [r7, #31]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d105      	bne.n	8001af8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aec:	4b7a      	ldr	r3, [pc, #488]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af0:	4a79      	ldr	r2, [pc, #484]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001af2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001af6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 80fe 	beq.w	8001cfe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	f040 80d0 	bne.w	8001cac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b0c:	4b72      	ldr	r3, [pc, #456]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f003 0203 	and.w	r2, r3, #3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d130      	bne.n	8001b82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d127      	bne.n	8001b82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b3c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d11f      	bne.n	8001b82 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b4c:	2a07      	cmp	r2, #7
 8001b4e:	bf14      	ite	ne
 8001b50:	2201      	movne	r2, #1
 8001b52:	2200      	moveq	r2, #0
 8001b54:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d113      	bne.n	8001b82 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b64:	085b      	lsrs	r3, r3, #1
 8001b66:	3b01      	subs	r3, #1
 8001b68:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d109      	bne.n	8001b82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b78:	085b      	lsrs	r3, r3, #1
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d06e      	beq.n	8001c60 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	2b0c      	cmp	r3, #12
 8001b86:	d069      	beq.n	8001c5c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b88:	4b53      	ldr	r3, [pc, #332]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d105      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b94:	4b50      	ldr	r3, [pc, #320]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e0ad      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ba4:	4b4c      	ldr	r3, [pc, #304]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a4b      	ldr	r2, [pc, #300]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001baa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bb0:	f7ff f9ba 	bl	8000f28 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb8:	f7ff f9b6 	bl	8000f28 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e09a      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bca:	4b43      	ldr	r3, [pc, #268]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f0      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bd6:	4b40      	ldr	r3, [pc, #256]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	4b40      	ldr	r3, [pc, #256]	; (8001cdc <HAL_RCC_OscConfig+0x784>)
 8001bdc:	4013      	ands	r3, r2
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001be6:	3a01      	subs	r2, #1
 8001be8:	0112      	lsls	r2, r2, #4
 8001bea:	4311      	orrs	r1, r2
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bf0:	0212      	lsls	r2, r2, #8
 8001bf2:	4311      	orrs	r1, r2
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001bf8:	0852      	lsrs	r2, r2, #1
 8001bfa:	3a01      	subs	r2, #1
 8001bfc:	0552      	lsls	r2, r2, #21
 8001bfe:	4311      	orrs	r1, r2
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c04:	0852      	lsrs	r2, r2, #1
 8001c06:	3a01      	subs	r2, #1
 8001c08:	0652      	lsls	r2, r2, #25
 8001c0a:	4311      	orrs	r1, r2
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c10:	0912      	lsrs	r2, r2, #4
 8001c12:	0452      	lsls	r2, r2, #17
 8001c14:	430a      	orrs	r2, r1
 8001c16:	4930      	ldr	r1, [pc, #192]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c1c:	4b2e      	ldr	r3, [pc, #184]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a2d      	ldr	r2, [pc, #180]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c26:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c28:	4b2b      	ldr	r3, [pc, #172]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	4a2a      	ldr	r2, [pc, #168]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c32:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c34:	f7ff f978 	bl	8000f28 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c3c:	f7ff f974 	bl	8000f28 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e058      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c4e:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c5a:	e050      	b.n	8001cfe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e04f      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c60:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d148      	bne.n	8001cfe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c6c:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a19      	ldr	r2, [pc, #100]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001c72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c76:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c78:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	4a16      	ldr	r2, [pc, #88]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c82:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c84:	f7ff f950 	bl	8000f28 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8c:	f7ff f94c 	bl	8000f28 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e030      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f0      	beq.n	8001c8c <HAL_RCC_OscConfig+0x734>
 8001caa:	e028      	b.n	8001cfe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	2b0c      	cmp	r3, #12
 8001cb0:	d023      	beq.n	8001cfa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb2:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a08      	ldr	r2, [pc, #32]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001cb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbe:	f7ff f933 	bl	8000f28 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cc4:	e00c      	b.n	8001ce0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc6:	f7ff f92f 	bl	8000f28 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d905      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e013      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce0:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <HAL_RCC_OscConfig+0x7b0>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1ec      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_RCC_OscConfig+0x7b0>)
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	4905      	ldr	r1, [pc, #20]	; (8001d08 <HAL_RCC_OscConfig+0x7b0>)
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_RCC_OscConfig+0x7b4>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60cb      	str	r3, [r1, #12]
 8001cf8:	e001      	b.n	8001cfe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3720      	adds	r7, #32
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	feeefffc 	.word	0xfeeefffc

08001d10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0e7      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d24:	4b75      	ldr	r3, [pc, #468]	; (8001efc <HAL_RCC_ClockConfig+0x1ec>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d910      	bls.n	8001d54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d32:	4b72      	ldr	r3, [pc, #456]	; (8001efc <HAL_RCC_ClockConfig+0x1ec>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 0207 	bic.w	r2, r3, #7
 8001d3a:	4970      	ldr	r1, [pc, #448]	; (8001efc <HAL_RCC_ClockConfig+0x1ec>)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d42:	4b6e      	ldr	r3, [pc, #440]	; (8001efc <HAL_RCC_ClockConfig+0x1ec>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d001      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0cf      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d010      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	4b66      	ldr	r3, [pc, #408]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d908      	bls.n	8001d82 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d70:	4b63      	ldr	r3, [pc, #396]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	4960      	ldr	r1, [pc, #384]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d04c      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b03      	cmp	r3, #3
 8001d94:	d107      	bne.n	8001da6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d96:	4b5a      	ldr	r3, [pc, #360]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d121      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e0a6      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d107      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dae:	4b54      	ldr	r3, [pc, #336]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d115      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e09a      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d107      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dc6:	4b4e      	ldr	r3, [pc, #312]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d109      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e08e      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dd6:	4b4a      	ldr	r3, [pc, #296]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e086      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001de6:	4b46      	ldr	r3, [pc, #280]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f023 0203 	bic.w	r2, r3, #3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	4943      	ldr	r1, [pc, #268]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001df8:	f7ff f896 	bl	8000f28 <HAL_GetTick>
 8001dfc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfe:	e00a      	b.n	8001e16 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e00:	f7ff f892 	bl	8000f28 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e06e      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e16:	4b3a      	ldr	r3, [pc, #232]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 020c 	and.w	r2, r3, #12
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d1eb      	bne.n	8001e00 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d010      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	4b31      	ldr	r3, [pc, #196]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d208      	bcs.n	8001e56 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e44:	4b2e      	ldr	r3, [pc, #184]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	492b      	ldr	r1, [pc, #172]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e56:	4b29      	ldr	r3, [pc, #164]	; (8001efc <HAL_RCC_ClockConfig+0x1ec>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d210      	bcs.n	8001e86 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e64:	4b25      	ldr	r3, [pc, #148]	; (8001efc <HAL_RCC_ClockConfig+0x1ec>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f023 0207 	bic.w	r2, r3, #7
 8001e6c:	4923      	ldr	r1, [pc, #140]	; (8001efc <HAL_RCC_ClockConfig+0x1ec>)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e74:	4b21      	ldr	r3, [pc, #132]	; (8001efc <HAL_RCC_ClockConfig+0x1ec>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d001      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e036      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d008      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e92:	4b1b      	ldr	r3, [pc, #108]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	4918      	ldr	r1, [pc, #96]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0308 	and.w	r3, r3, #8
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d009      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eb0:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	4910      	ldr	r1, [pc, #64]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ec4:	f000 f824 	bl	8001f10 <HAL_RCC_GetSysClockFreq>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	091b      	lsrs	r3, r3, #4
 8001ed0:	f003 030f 	and.w	r3, r3, #15
 8001ed4:	490b      	ldr	r1, [pc, #44]	; (8001f04 <HAL_RCC_ClockConfig+0x1f4>)
 8001ed6:	5ccb      	ldrb	r3, [r1, r3]
 8001ed8:	f003 031f 	and.w	r3, r3, #31
 8001edc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee0:	4a09      	ldr	r2, [pc, #36]	; (8001f08 <HAL_RCC_ClockConfig+0x1f8>)
 8001ee2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ee4:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <HAL_RCC_ClockConfig+0x1fc>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe ffcd 	bl	8000e88 <HAL_InitTick>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ef2:	7afb      	ldrb	r3, [r7, #11]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40022000 	.word	0x40022000
 8001f00:	40021000 	.word	0x40021000
 8001f04:	080034dc 	.word	0x080034dc
 8001f08:	20000000 	.word	0x20000000
 8001f0c:	20000004 	.word	0x20000004

08001f10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b089      	sub	sp, #36	; 0x24
 8001f14:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61fb      	str	r3, [r7, #28]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f1e:	4b3e      	ldr	r3, [pc, #248]	; (8002018 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 030c 	and.w	r3, r3, #12
 8001f26:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f28:	4b3b      	ldr	r3, [pc, #236]	; (8002018 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d005      	beq.n	8001f44 <HAL_RCC_GetSysClockFreq+0x34>
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	2b0c      	cmp	r3, #12
 8001f3c:	d121      	bne.n	8001f82 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d11e      	bne.n	8001f82 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f44:	4b34      	ldr	r3, [pc, #208]	; (8002018 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d107      	bne.n	8001f60 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f50:	4b31      	ldr	r3, [pc, #196]	; (8002018 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f56:	0a1b      	lsrs	r3, r3, #8
 8001f58:	f003 030f 	and.w	r3, r3, #15
 8001f5c:	61fb      	str	r3, [r7, #28]
 8001f5e:	e005      	b.n	8001f6c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f60:	4b2d      	ldr	r3, [pc, #180]	; (8002018 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	091b      	lsrs	r3, r3, #4
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f6c:	4a2b      	ldr	r2, [pc, #172]	; (800201c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f74:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10d      	bne.n	8001f98 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f80:	e00a      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	2b04      	cmp	r3, #4
 8001f86:	d102      	bne.n	8001f8e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f88:	4b25      	ldr	r3, [pc, #148]	; (8002020 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f8a:	61bb      	str	r3, [r7, #24]
 8001f8c:	e004      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d101      	bne.n	8001f98 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f94:	4b23      	ldr	r3, [pc, #140]	; (8002024 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f96:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	2b0c      	cmp	r3, #12
 8001f9c:	d134      	bne.n	8002008 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f9e:	4b1e      	ldr	r3, [pc, #120]	; (8002018 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d003      	beq.n	8001fb6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	2b03      	cmp	r3, #3
 8001fb2:	d003      	beq.n	8001fbc <HAL_RCC_GetSysClockFreq+0xac>
 8001fb4:	e005      	b.n	8001fc2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fb6:	4b1a      	ldr	r3, [pc, #104]	; (8002020 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fb8:	617b      	str	r3, [r7, #20]
      break;
 8001fba:	e005      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001fbc:	4b19      	ldr	r3, [pc, #100]	; (8002024 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fbe:	617b      	str	r3, [r7, #20]
      break;
 8001fc0:	e002      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	617b      	str	r3, [r7, #20]
      break;
 8001fc6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fc8:	4b13      	ldr	r3, [pc, #76]	; (8002018 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	091b      	lsrs	r3, r3, #4
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001fd6:	4b10      	ldr	r3, [pc, #64]	; (8002018 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	0a1b      	lsrs	r3, r3, #8
 8001fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	fb03 f202 	mul.w	r2, r3, r2
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fee:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	0e5b      	lsrs	r3, r3, #25
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	fbb2 f3f3 	udiv	r3, r2, r3
 8002006:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002008:	69bb      	ldr	r3, [r7, #24]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3724      	adds	r7, #36	; 0x24
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40021000 	.word	0x40021000
 800201c:	080034f4 	.word	0x080034f4
 8002020:	00f42400 	.word	0x00f42400
 8002024:	007a1200 	.word	0x007a1200

08002028 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800202c:	4b03      	ldr	r3, [pc, #12]	; (800203c <HAL_RCC_GetHCLKFreq+0x14>)
 800202e:	681b      	ldr	r3, [r3, #0]
}
 8002030:	4618      	mov	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	20000000 	.word	0x20000000

08002040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002044:	f7ff fff0 	bl	8002028 <HAL_RCC_GetHCLKFreq>
 8002048:	4602      	mov	r2, r0
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <HAL_RCC_GetPCLK1Freq+0x24>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	0a1b      	lsrs	r3, r3, #8
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	4904      	ldr	r1, [pc, #16]	; (8002068 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002056:	5ccb      	ldrb	r3, [r1, r3]
 8002058:	f003 031f 	and.w	r3, r3, #31
 800205c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002060:	4618      	mov	r0, r3
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40021000 	.word	0x40021000
 8002068:	080034ec 	.word	0x080034ec

0800206c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002070:	f7ff ffda 	bl	8002028 <HAL_RCC_GetHCLKFreq>
 8002074:	4602      	mov	r2, r0
 8002076:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	0adb      	lsrs	r3, r3, #11
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	4904      	ldr	r1, [pc, #16]	; (8002094 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002082:	5ccb      	ldrb	r3, [r1, r3]
 8002084:	f003 031f 	and.w	r3, r3, #31
 8002088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800208c:	4618      	mov	r0, r3
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40021000 	.word	0x40021000
 8002094:	080034ec 	.word	0x080034ec

08002098 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020a0:	2300      	movs	r3, #0
 80020a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020a4:	4b2a      	ldr	r3, [pc, #168]	; (8002150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020b0:	f7ff f9ee 	bl	8001490 <HAL_PWREx_GetVoltageRange>
 80020b4:	6178      	str	r0, [r7, #20]
 80020b6:	e014      	b.n	80020e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020b8:	4b25      	ldr	r3, [pc, #148]	; (8002150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020bc:	4a24      	ldr	r2, [pc, #144]	; (8002150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c2:	6593      	str	r3, [r2, #88]	; 0x58
 80020c4:	4b22      	ldr	r3, [pc, #136]	; (8002150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020d0:	f7ff f9de 	bl	8001490 <HAL_PWREx_GetVoltageRange>
 80020d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020d6:	4b1e      	ldr	r3, [pc, #120]	; (8002150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020da:	4a1d      	ldr	r2, [pc, #116]	; (8002150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020e8:	d10b      	bne.n	8002102 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b80      	cmp	r3, #128	; 0x80
 80020ee:	d919      	bls.n	8002124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2ba0      	cmp	r3, #160	; 0xa0
 80020f4:	d902      	bls.n	80020fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020f6:	2302      	movs	r3, #2
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	e013      	b.n	8002124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020fc:	2301      	movs	r3, #1
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	e010      	b.n	8002124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b80      	cmp	r3, #128	; 0x80
 8002106:	d902      	bls.n	800210e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002108:	2303      	movs	r3, #3
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	e00a      	b.n	8002124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b80      	cmp	r3, #128	; 0x80
 8002112:	d102      	bne.n	800211a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002114:	2302      	movs	r3, #2
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	e004      	b.n	8002124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b70      	cmp	r3, #112	; 0x70
 800211e:	d101      	bne.n	8002124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002120:	2301      	movs	r3, #1
 8002122:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f023 0207 	bic.w	r2, r3, #7
 800212c:	4909      	ldr	r1, [pc, #36]	; (8002154 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002134:	4b07      	ldr	r3, [pc, #28]	; (8002154 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	429a      	cmp	r2, r3
 8002140:	d001      	beq.n	8002146 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40021000 	.word	0x40021000
 8002154:	40022000 	.word	0x40022000

08002158 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002160:	2300      	movs	r3, #0
 8002162:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002164:	2300      	movs	r3, #0
 8002166:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002170:	2b00      	cmp	r3, #0
 8002172:	d041      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002178:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800217c:	d02a      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800217e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002182:	d824      	bhi.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002184:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002188:	d008      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800218a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800218e:	d81e      	bhi.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00a      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002194:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002198:	d010      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800219a:	e018      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800219c:	4b86      	ldr	r3, [pc, #536]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	4a85      	ldr	r2, [pc, #532]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021a8:	e015      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3304      	adds	r3, #4
 80021ae:	2100      	movs	r1, #0
 80021b0:	4618      	mov	r0, r3
 80021b2:	f000 fabb 	bl	800272c <RCCEx_PLLSAI1_Config>
 80021b6:	4603      	mov	r3, r0
 80021b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021ba:	e00c      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3320      	adds	r3, #32
 80021c0:	2100      	movs	r1, #0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 fba6 	bl	8002914 <RCCEx_PLLSAI2_Config>
 80021c8:	4603      	mov	r3, r0
 80021ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021cc:	e003      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	74fb      	strb	r3, [r7, #19]
      break;
 80021d2:	e000      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80021d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021d6:	7cfb      	ldrb	r3, [r7, #19]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10b      	bne.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021dc:	4b76      	ldr	r3, [pc, #472]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021ea:	4973      	ldr	r1, [pc, #460]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021f2:	e001      	b.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021f4:	7cfb      	ldrb	r3, [r7, #19]
 80021f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d041      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002208:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800220c:	d02a      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800220e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002212:	d824      	bhi.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002214:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002218:	d008      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800221a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800221e:	d81e      	bhi.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00a      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002228:	d010      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800222a:	e018      	b.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800222c:	4b62      	ldr	r3, [pc, #392]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	4a61      	ldr	r2, [pc, #388]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002236:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002238:	e015      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3304      	adds	r3, #4
 800223e:	2100      	movs	r1, #0
 8002240:	4618      	mov	r0, r3
 8002242:	f000 fa73 	bl	800272c <RCCEx_PLLSAI1_Config>
 8002246:	4603      	mov	r3, r0
 8002248:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800224a:	e00c      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3320      	adds	r3, #32
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f000 fb5e 	bl	8002914 <RCCEx_PLLSAI2_Config>
 8002258:	4603      	mov	r3, r0
 800225a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800225c:	e003      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	74fb      	strb	r3, [r7, #19]
      break;
 8002262:	e000      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002264:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002266:	7cfb      	ldrb	r3, [r7, #19]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10b      	bne.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800226c:	4b52      	ldr	r3, [pc, #328]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800226e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002272:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800227a:	494f      	ldr	r1, [pc, #316]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002282:	e001      	b.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002284:	7cfb      	ldrb	r3, [r7, #19]
 8002286:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 80a0 	beq.w	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002296:	2300      	movs	r3, #0
 8002298:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800229a:	4b47      	ldr	r3, [pc, #284]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800229c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x154>
 80022aa:	2300      	movs	r3, #0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00d      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b0:	4b41      	ldr	r3, [pc, #260]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b4:	4a40      	ldr	r2, [pc, #256]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ba:	6593      	str	r3, [r2, #88]	; 0x58
 80022bc:	4b3e      	ldr	r3, [pc, #248]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022c8:	2301      	movs	r3, #1
 80022ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022cc:	4b3b      	ldr	r3, [pc, #236]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a3a      	ldr	r2, [pc, #232]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022d8:	f7fe fe26 	bl	8000f28 <HAL_GetTick>
 80022dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022de:	e009      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e0:	f7fe fe22 	bl	8000f28 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d902      	bls.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	74fb      	strb	r3, [r7, #19]
        break;
 80022f2:	e005      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022f4:	4b31      	ldr	r3, [pc, #196]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0ef      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002300:	7cfb      	ldrb	r3, [r7, #19]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d15c      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002306:	4b2c      	ldr	r3, [pc, #176]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002310:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d01f      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	429a      	cmp	r2, r3
 8002322:	d019      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002324:	4b24      	ldr	r3, [pc, #144]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800232e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002330:	4b21      	ldr	r3, [pc, #132]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002336:	4a20      	ldr	r2, [pc, #128]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800233c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002340:	4b1d      	ldr	r3, [pc, #116]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002346:	4a1c      	ldr	r2, [pc, #112]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002348:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800234c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002350:	4a19      	ldr	r2, [pc, #100]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d016      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002362:	f7fe fde1 	bl	8000f28 <HAL_GetTick>
 8002366:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002368:	e00b      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236a:	f7fe fddd 	bl	8000f28 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	f241 3288 	movw	r2, #5000	; 0x1388
 8002378:	4293      	cmp	r3, r2
 800237a:	d902      	bls.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	74fb      	strb	r3, [r7, #19]
            break;
 8002380:	e006      	b.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002382:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0ec      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002390:	7cfb      	ldrb	r3, [r7, #19]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10c      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002396:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023a6:	4904      	ldr	r1, [pc, #16]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023ae:	e009      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023b0:	7cfb      	ldrb	r3, [r7, #19]
 80023b2:	74bb      	strb	r3, [r7, #18]
 80023b4:	e006      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80023b6:	bf00      	nop
 80023b8:	40021000 	.word	0x40021000
 80023bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023c0:	7cfb      	ldrb	r3, [r7, #19]
 80023c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023c4:	7c7b      	ldrb	r3, [r7, #17]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d105      	bne.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ca:	4b9e      	ldr	r3, [pc, #632]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ce:	4a9d      	ldr	r2, [pc, #628]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00a      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023e2:	4b98      	ldr	r3, [pc, #608]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e8:	f023 0203 	bic.w	r2, r3, #3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f0:	4994      	ldr	r1, [pc, #592]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00a      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002404:	4b8f      	ldr	r3, [pc, #572]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240a:	f023 020c 	bic.w	r2, r3, #12
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002412:	498c      	ldr	r1, [pc, #560]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00a      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002426:	4b87      	ldr	r3, [pc, #540]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	4983      	ldr	r1, [pc, #524]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002436:	4313      	orrs	r3, r2
 8002438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00a      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002448:	4b7e      	ldr	r3, [pc, #504]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002456:	497b      	ldr	r1, [pc, #492]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002458:	4313      	orrs	r3, r2
 800245a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0310 	and.w	r3, r3, #16
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00a      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800246a:	4b76      	ldr	r3, [pc, #472]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002470:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002478:	4972      	ldr	r1, [pc, #456]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800247a:	4313      	orrs	r3, r2
 800247c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0320 	and.w	r3, r3, #32
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00a      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800248c:	4b6d      	ldr	r3, [pc, #436]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002492:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249a:	496a      	ldr	r1, [pc, #424]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800249c:	4313      	orrs	r3, r2
 800249e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00a      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024ae:	4b65      	ldr	r3, [pc, #404]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024bc:	4961      	ldr	r1, [pc, #388]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00a      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024d0:	4b5c      	ldr	r3, [pc, #368]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024de:	4959      	ldr	r1, [pc, #356]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00a      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024f2:	4b54      	ldr	r3, [pc, #336]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002500:	4950      	ldr	r1, [pc, #320]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002502:	4313      	orrs	r3, r2
 8002504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00a      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002514:	4b4b      	ldr	r3, [pc, #300]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002522:	4948      	ldr	r1, [pc, #288]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002524:	4313      	orrs	r3, r2
 8002526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00a      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002536:	4b43      	ldr	r3, [pc, #268]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002544:	493f      	ldr	r1, [pc, #252]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002546:	4313      	orrs	r3, r2
 8002548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d028      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002558:	4b3a      	ldr	r3, [pc, #232]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002566:	4937      	ldr	r1, [pc, #220]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002568:	4313      	orrs	r3, r2
 800256a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002572:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002576:	d106      	bne.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002578:	4b32      	ldr	r3, [pc, #200]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	4a31      	ldr	r2, [pc, #196]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800257e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002582:	60d3      	str	r3, [r2, #12]
 8002584:	e011      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800258a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800258e:	d10c      	bne.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3304      	adds	r3, #4
 8002594:	2101      	movs	r1, #1
 8002596:	4618      	mov	r0, r3
 8002598:	f000 f8c8 	bl	800272c <RCCEx_PLLSAI1_Config>
 800259c:	4603      	mov	r3, r0
 800259e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025a0:	7cfb      	ldrb	r3, [r7, #19]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80025a6:	7cfb      	ldrb	r3, [r7, #19]
 80025a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d028      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025b6:	4b23      	ldr	r3, [pc, #140]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c4:	491f      	ldr	r1, [pc, #124]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025d4:	d106      	bne.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025d6:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	4a1a      	ldr	r2, [pc, #104]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025e0:	60d3      	str	r3, [r2, #12]
 80025e2:	e011      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025ec:	d10c      	bne.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3304      	adds	r3, #4
 80025f2:	2101      	movs	r1, #1
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 f899 	bl	800272c <RCCEx_PLLSAI1_Config>
 80025fa:	4603      	mov	r3, r0
 80025fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025fe:	7cfb      	ldrb	r3, [r7, #19]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002604:	7cfb      	ldrb	r3, [r7, #19]
 8002606:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d02b      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002614:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002622:	4908      	ldr	r1, [pc, #32]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002624:	4313      	orrs	r3, r2
 8002626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800262e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002632:	d109      	bne.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002634:	4b03      	ldr	r3, [pc, #12]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	4a02      	ldr	r2, [pc, #8]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800263e:	60d3      	str	r3, [r2, #12]
 8002640:	e014      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002642:	bf00      	nop
 8002644:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800264c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002650:	d10c      	bne.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3304      	adds	r3, #4
 8002656:	2101      	movs	r1, #1
 8002658:	4618      	mov	r0, r3
 800265a:	f000 f867 	bl	800272c <RCCEx_PLLSAI1_Config>
 800265e:	4603      	mov	r3, r0
 8002660:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002662:	7cfb      	ldrb	r3, [r7, #19]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002668:	7cfb      	ldrb	r3, [r7, #19]
 800266a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d02f      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002678:	4b2b      	ldr	r3, [pc, #172]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800267a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002686:	4928      	ldr	r1, [pc, #160]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002688:	4313      	orrs	r3, r2
 800268a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002692:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002696:	d10d      	bne.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3304      	adds	r3, #4
 800269c:	2102      	movs	r1, #2
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 f844 	bl	800272c <RCCEx_PLLSAI1_Config>
 80026a4:	4603      	mov	r3, r0
 80026a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026a8:	7cfb      	ldrb	r3, [r7, #19]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d014      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026ae:	7cfb      	ldrb	r3, [r7, #19]
 80026b0:	74bb      	strb	r3, [r7, #18]
 80026b2:	e011      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026bc:	d10c      	bne.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3320      	adds	r3, #32
 80026c2:	2102      	movs	r1, #2
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 f925 	bl	8002914 <RCCEx_PLLSAI2_Config>
 80026ca:	4603      	mov	r3, r0
 80026cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026ce:	7cfb      	ldrb	r3, [r7, #19]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026d4:	7cfb      	ldrb	r3, [r7, #19]
 80026d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00a      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80026e4:	4b10      	ldr	r3, [pc, #64]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026f2:	490d      	ldr	r1, [pc, #52]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00b      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002706:	4b08      	ldr	r3, [pc, #32]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002716:	4904      	ldr	r1, [pc, #16]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002718:	4313      	orrs	r3, r2
 800271a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800271e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40021000 	.word	0x40021000

0800272c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800273a:	4b75      	ldr	r3, [pc, #468]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d018      	beq.n	8002778 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002746:	4b72      	ldr	r3, [pc, #456]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	f003 0203 	and.w	r2, r3, #3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d10d      	bne.n	8002772 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
       ||
 800275a:	2b00      	cmp	r3, #0
 800275c:	d009      	beq.n	8002772 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800275e:	4b6c      	ldr	r3, [pc, #432]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	091b      	lsrs	r3, r3, #4
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
       ||
 800276e:	429a      	cmp	r2, r3
 8002770:	d047      	beq.n	8002802 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	73fb      	strb	r3, [r7, #15]
 8002776:	e044      	b.n	8002802 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b03      	cmp	r3, #3
 800277e:	d018      	beq.n	80027b2 <RCCEx_PLLSAI1_Config+0x86>
 8002780:	2b03      	cmp	r3, #3
 8002782:	d825      	bhi.n	80027d0 <RCCEx_PLLSAI1_Config+0xa4>
 8002784:	2b01      	cmp	r3, #1
 8002786:	d002      	beq.n	800278e <RCCEx_PLLSAI1_Config+0x62>
 8002788:	2b02      	cmp	r3, #2
 800278a:	d009      	beq.n	80027a0 <RCCEx_PLLSAI1_Config+0x74>
 800278c:	e020      	b.n	80027d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800278e:	4b60      	ldr	r3, [pc, #384]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d11d      	bne.n	80027d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800279e:	e01a      	b.n	80027d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027a0:	4b5b      	ldr	r3, [pc, #364]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d116      	bne.n	80027da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027b0:	e013      	b.n	80027da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027b2:	4b57      	ldr	r3, [pc, #348]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10f      	bne.n	80027de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027be:	4b54      	ldr	r3, [pc, #336]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d109      	bne.n	80027de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027ce:	e006      	b.n	80027de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	73fb      	strb	r3, [r7, #15]
      break;
 80027d4:	e004      	b.n	80027e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027d6:	bf00      	nop
 80027d8:	e002      	b.n	80027e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027da:	bf00      	nop
 80027dc:	e000      	b.n	80027e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027de:	bf00      	nop
    }

    if(status == HAL_OK)
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10d      	bne.n	8002802 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027e6:	4b4a      	ldr	r3, [pc, #296]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6819      	ldr	r1, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	430b      	orrs	r3, r1
 80027fc:	4944      	ldr	r1, [pc, #272]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d17d      	bne.n	8002904 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002808:	4b41      	ldr	r3, [pc, #260]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a40      	ldr	r2, [pc, #256]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 800280e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002812:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002814:	f7fe fb88 	bl	8000f28 <HAL_GetTick>
 8002818:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800281a:	e009      	b.n	8002830 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800281c:	f7fe fb84 	bl	8000f28 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d902      	bls.n	8002830 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	73fb      	strb	r3, [r7, #15]
        break;
 800282e:	e005      	b.n	800283c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002830:	4b37      	ldr	r3, [pc, #220]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1ef      	bne.n	800281c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800283c:	7bfb      	ldrb	r3, [r7, #15]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d160      	bne.n	8002904 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d111      	bne.n	800286c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002848:	4b31      	ldr	r3, [pc, #196]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002850:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6892      	ldr	r2, [r2, #8]
 8002858:	0211      	lsls	r1, r2, #8
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	68d2      	ldr	r2, [r2, #12]
 800285e:	0912      	lsrs	r2, r2, #4
 8002860:	0452      	lsls	r2, r2, #17
 8002862:	430a      	orrs	r2, r1
 8002864:	492a      	ldr	r1, [pc, #168]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002866:	4313      	orrs	r3, r2
 8002868:	610b      	str	r3, [r1, #16]
 800286a:	e027      	b.n	80028bc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d112      	bne.n	8002898 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002872:	4b27      	ldr	r3, [pc, #156]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800287a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6892      	ldr	r2, [r2, #8]
 8002882:	0211      	lsls	r1, r2, #8
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6912      	ldr	r2, [r2, #16]
 8002888:	0852      	lsrs	r2, r2, #1
 800288a:	3a01      	subs	r2, #1
 800288c:	0552      	lsls	r2, r2, #21
 800288e:	430a      	orrs	r2, r1
 8002890:	491f      	ldr	r1, [pc, #124]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002892:	4313      	orrs	r3, r2
 8002894:	610b      	str	r3, [r1, #16]
 8002896:	e011      	b.n	80028bc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002898:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6892      	ldr	r2, [r2, #8]
 80028a8:	0211      	lsls	r1, r2, #8
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6952      	ldr	r2, [r2, #20]
 80028ae:	0852      	lsrs	r2, r2, #1
 80028b0:	3a01      	subs	r2, #1
 80028b2:	0652      	lsls	r2, r2, #25
 80028b4:	430a      	orrs	r2, r1
 80028b6:	4916      	ldr	r1, [pc, #88]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80028bc:	4b14      	ldr	r3, [pc, #80]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a13      	ldr	r2, [pc, #76]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c8:	f7fe fb2e 	bl	8000f28 <HAL_GetTick>
 80028cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028ce:	e009      	b.n	80028e4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028d0:	f7fe fb2a 	bl	8000f28 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d902      	bls.n	80028e4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	73fb      	strb	r3, [r7, #15]
          break;
 80028e2:	e005      	b.n	80028f0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028e4:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0ef      	beq.n	80028d0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d106      	bne.n	8002904 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80028f6:	4b06      	ldr	r3, [pc, #24]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f8:	691a      	ldr	r2, [r3, #16]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	4904      	ldr	r1, [pc, #16]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002900:	4313      	orrs	r3, r2
 8002902:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002904:	7bfb      	ldrb	r3, [r7, #15]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40021000 	.word	0x40021000

08002914 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002922:	4b6a      	ldr	r3, [pc, #424]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d018      	beq.n	8002960 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800292e:	4b67      	ldr	r3, [pc, #412]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	f003 0203 	and.w	r2, r3, #3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d10d      	bne.n	800295a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
       ||
 8002942:	2b00      	cmp	r3, #0
 8002944:	d009      	beq.n	800295a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002946:	4b61      	ldr	r3, [pc, #388]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	091b      	lsrs	r3, r3, #4
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
       ||
 8002956:	429a      	cmp	r2, r3
 8002958:	d047      	beq.n	80029ea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	73fb      	strb	r3, [r7, #15]
 800295e:	e044      	b.n	80029ea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b03      	cmp	r3, #3
 8002966:	d018      	beq.n	800299a <RCCEx_PLLSAI2_Config+0x86>
 8002968:	2b03      	cmp	r3, #3
 800296a:	d825      	bhi.n	80029b8 <RCCEx_PLLSAI2_Config+0xa4>
 800296c:	2b01      	cmp	r3, #1
 800296e:	d002      	beq.n	8002976 <RCCEx_PLLSAI2_Config+0x62>
 8002970:	2b02      	cmp	r3, #2
 8002972:	d009      	beq.n	8002988 <RCCEx_PLLSAI2_Config+0x74>
 8002974:	e020      	b.n	80029b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002976:	4b55      	ldr	r3, [pc, #340]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d11d      	bne.n	80029be <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002986:	e01a      	b.n	80029be <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002988:	4b50      	ldr	r3, [pc, #320]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002990:	2b00      	cmp	r3, #0
 8002992:	d116      	bne.n	80029c2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002998:	e013      	b.n	80029c2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800299a:	4b4c      	ldr	r3, [pc, #304]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10f      	bne.n	80029c6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029a6:	4b49      	ldr	r3, [pc, #292]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d109      	bne.n	80029c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029b6:	e006      	b.n	80029c6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	73fb      	strb	r3, [r7, #15]
      break;
 80029bc:	e004      	b.n	80029c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029be:	bf00      	nop
 80029c0:	e002      	b.n	80029c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029c2:	bf00      	nop
 80029c4:	e000      	b.n	80029c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10d      	bne.n	80029ea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029ce:	4b3f      	ldr	r3, [pc, #252]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6819      	ldr	r1, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	3b01      	subs	r3, #1
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	430b      	orrs	r3, r1
 80029e4:	4939      	ldr	r1, [pc, #228]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d167      	bne.n	8002ac0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80029f0:	4b36      	ldr	r3, [pc, #216]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a35      	ldr	r2, [pc, #212]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 80029f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029fc:	f7fe fa94 	bl	8000f28 <HAL_GetTick>
 8002a00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a02:	e009      	b.n	8002a18 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a04:	f7fe fa90 	bl	8000f28 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d902      	bls.n	8002a18 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	73fb      	strb	r3, [r7, #15]
        break;
 8002a16:	e005      	b.n	8002a24 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a18:	4b2c      	ldr	r3, [pc, #176]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1ef      	bne.n	8002a04 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d14a      	bne.n	8002ac0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d111      	bne.n	8002a54 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a30:	4b26      	ldr	r3, [pc, #152]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6892      	ldr	r2, [r2, #8]
 8002a40:	0211      	lsls	r1, r2, #8
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	68d2      	ldr	r2, [r2, #12]
 8002a46:	0912      	lsrs	r2, r2, #4
 8002a48:	0452      	lsls	r2, r2, #17
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	491f      	ldr	r1, [pc, #124]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	614b      	str	r3, [r1, #20]
 8002a52:	e011      	b.n	8002a78 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a54:	4b1d      	ldr	r3, [pc, #116]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6892      	ldr	r2, [r2, #8]
 8002a64:	0211      	lsls	r1, r2, #8
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6912      	ldr	r2, [r2, #16]
 8002a6a:	0852      	lsrs	r2, r2, #1
 8002a6c:	3a01      	subs	r2, #1
 8002a6e:	0652      	lsls	r2, r2, #25
 8002a70:	430a      	orrs	r2, r1
 8002a72:	4916      	ldr	r1, [pc, #88]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a78:	4b14      	ldr	r3, [pc, #80]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a13      	ldr	r2, [pc, #76]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a84:	f7fe fa50 	bl	8000f28 <HAL_GetTick>
 8002a88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a8a:	e009      	b.n	8002aa0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a8c:	f7fe fa4c 	bl	8000f28 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d902      	bls.n	8002aa0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	73fb      	strb	r3, [r7, #15]
          break;
 8002a9e:	e005      	b.n	8002aac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002aa0:	4b0a      	ldr	r3, [pc, #40]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0ef      	beq.n	8002a8c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d106      	bne.n	8002ac0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ab2:	4b06      	ldr	r3, [pc, #24]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab4:	695a      	ldr	r2, [r3, #20]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	4904      	ldr	r1, [pc, #16]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40021000 	.word	0x40021000

08002ad0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e040      	b.n	8002b64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7fe f8e6 	bl	8000cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2224      	movs	r2, #36	; 0x24
 8002afc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0201 	bic.w	r2, r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f82c 	bl	8002b6c <UART_SetConfig>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e022      	b.n	8002b64 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 fad8 	bl	80030dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0201 	orr.w	r2, r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 fb5f 	bl	8003220 <UART_CheckIdleState>
 8002b62:	4603      	mov	r3, r0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b70:	b08a      	sub	sp, #40	; 0x28
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b76:	2300      	movs	r3, #0
 8002b78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	431a      	orrs	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	4ba4      	ldr	r3, [pc, #656]	; (8002e2c <UART_SetConfig+0x2c0>)
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	6812      	ldr	r2, [r2, #0]
 8002ba2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ba4:	430b      	orrs	r3, r1
 8002ba6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a99      	ldr	r2, [pc, #612]	; (8002e30 <UART_SetConfig+0x2c4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d004      	beq.n	8002bd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be8:	430a      	orrs	r2, r1
 8002bea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a90      	ldr	r2, [pc, #576]	; (8002e34 <UART_SetConfig+0x2c8>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d126      	bne.n	8002c44 <UART_SetConfig+0xd8>
 8002bf6:	4b90      	ldr	r3, [pc, #576]	; (8002e38 <UART_SetConfig+0x2cc>)
 8002bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d81b      	bhi.n	8002c3c <UART_SetConfig+0xd0>
 8002c04:	a201      	add	r2, pc, #4	; (adr r2, 8002c0c <UART_SetConfig+0xa0>)
 8002c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0a:	bf00      	nop
 8002c0c:	08002c1d 	.word	0x08002c1d
 8002c10:	08002c2d 	.word	0x08002c2d
 8002c14:	08002c25 	.word	0x08002c25
 8002c18:	08002c35 	.word	0x08002c35
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c22:	e116      	b.n	8002e52 <UART_SetConfig+0x2e6>
 8002c24:	2302      	movs	r3, #2
 8002c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c2a:	e112      	b.n	8002e52 <UART_SetConfig+0x2e6>
 8002c2c:	2304      	movs	r3, #4
 8002c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c32:	e10e      	b.n	8002e52 <UART_SetConfig+0x2e6>
 8002c34:	2308      	movs	r3, #8
 8002c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c3a:	e10a      	b.n	8002e52 <UART_SetConfig+0x2e6>
 8002c3c:	2310      	movs	r3, #16
 8002c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c42:	e106      	b.n	8002e52 <UART_SetConfig+0x2e6>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a7c      	ldr	r2, [pc, #496]	; (8002e3c <UART_SetConfig+0x2d0>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d138      	bne.n	8002cc0 <UART_SetConfig+0x154>
 8002c4e:	4b7a      	ldr	r3, [pc, #488]	; (8002e38 <UART_SetConfig+0x2cc>)
 8002c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c54:	f003 030c 	and.w	r3, r3, #12
 8002c58:	2b0c      	cmp	r3, #12
 8002c5a:	d82d      	bhi.n	8002cb8 <UART_SetConfig+0x14c>
 8002c5c:	a201      	add	r2, pc, #4	; (adr r2, 8002c64 <UART_SetConfig+0xf8>)
 8002c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c62:	bf00      	nop
 8002c64:	08002c99 	.word	0x08002c99
 8002c68:	08002cb9 	.word	0x08002cb9
 8002c6c:	08002cb9 	.word	0x08002cb9
 8002c70:	08002cb9 	.word	0x08002cb9
 8002c74:	08002ca9 	.word	0x08002ca9
 8002c78:	08002cb9 	.word	0x08002cb9
 8002c7c:	08002cb9 	.word	0x08002cb9
 8002c80:	08002cb9 	.word	0x08002cb9
 8002c84:	08002ca1 	.word	0x08002ca1
 8002c88:	08002cb9 	.word	0x08002cb9
 8002c8c:	08002cb9 	.word	0x08002cb9
 8002c90:	08002cb9 	.word	0x08002cb9
 8002c94:	08002cb1 	.word	0x08002cb1
 8002c98:	2300      	movs	r3, #0
 8002c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c9e:	e0d8      	b.n	8002e52 <UART_SetConfig+0x2e6>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ca6:	e0d4      	b.n	8002e52 <UART_SetConfig+0x2e6>
 8002ca8:	2304      	movs	r3, #4
 8002caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cae:	e0d0      	b.n	8002e52 <UART_SetConfig+0x2e6>
 8002cb0:	2308      	movs	r3, #8
 8002cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cb6:	e0cc      	b.n	8002e52 <UART_SetConfig+0x2e6>
 8002cb8:	2310      	movs	r3, #16
 8002cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cbe:	e0c8      	b.n	8002e52 <UART_SetConfig+0x2e6>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a5e      	ldr	r2, [pc, #376]	; (8002e40 <UART_SetConfig+0x2d4>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d125      	bne.n	8002d16 <UART_SetConfig+0x1aa>
 8002cca:	4b5b      	ldr	r3, [pc, #364]	; (8002e38 <UART_SetConfig+0x2cc>)
 8002ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002cd4:	2b30      	cmp	r3, #48	; 0x30
 8002cd6:	d016      	beq.n	8002d06 <UART_SetConfig+0x19a>
 8002cd8:	2b30      	cmp	r3, #48	; 0x30
 8002cda:	d818      	bhi.n	8002d0e <UART_SetConfig+0x1a2>
 8002cdc:	2b20      	cmp	r3, #32
 8002cde:	d00a      	beq.n	8002cf6 <UART_SetConfig+0x18a>
 8002ce0:	2b20      	cmp	r3, #32
 8002ce2:	d814      	bhi.n	8002d0e <UART_SetConfig+0x1a2>
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d002      	beq.n	8002cee <UART_SetConfig+0x182>
 8002ce8:	2b10      	cmp	r3, #16
 8002cea:	d008      	beq.n	8002cfe <UART_SetConfig+0x192>
 8002cec:	e00f      	b.n	8002d0e <UART_SetConfig+0x1a2>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cf4:	e0ad      	b.n	8002e52 <UART_SetConfig+0x2e6>
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cfc:	e0a9      	b.n	8002e52 <UART_SetConfig+0x2e6>
 8002cfe:	2304      	movs	r3, #4
 8002d00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d04:	e0a5      	b.n	8002e52 <UART_SetConfig+0x2e6>
 8002d06:	2308      	movs	r3, #8
 8002d08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d0c:	e0a1      	b.n	8002e52 <UART_SetConfig+0x2e6>
 8002d0e:	2310      	movs	r3, #16
 8002d10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d14:	e09d      	b.n	8002e52 <UART_SetConfig+0x2e6>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a4a      	ldr	r2, [pc, #296]	; (8002e44 <UART_SetConfig+0x2d8>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d125      	bne.n	8002d6c <UART_SetConfig+0x200>
 8002d20:	4b45      	ldr	r3, [pc, #276]	; (8002e38 <UART_SetConfig+0x2cc>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002d2a:	2bc0      	cmp	r3, #192	; 0xc0
 8002d2c:	d016      	beq.n	8002d5c <UART_SetConfig+0x1f0>
 8002d2e:	2bc0      	cmp	r3, #192	; 0xc0
 8002d30:	d818      	bhi.n	8002d64 <UART_SetConfig+0x1f8>
 8002d32:	2b80      	cmp	r3, #128	; 0x80
 8002d34:	d00a      	beq.n	8002d4c <UART_SetConfig+0x1e0>
 8002d36:	2b80      	cmp	r3, #128	; 0x80
 8002d38:	d814      	bhi.n	8002d64 <UART_SetConfig+0x1f8>
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <UART_SetConfig+0x1d8>
 8002d3e:	2b40      	cmp	r3, #64	; 0x40
 8002d40:	d008      	beq.n	8002d54 <UART_SetConfig+0x1e8>
 8002d42:	e00f      	b.n	8002d64 <UART_SetConfig+0x1f8>
 8002d44:	2300      	movs	r3, #0
 8002d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d4a:	e082      	b.n	8002e52 <UART_SetConfig+0x2e6>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d52:	e07e      	b.n	8002e52 <UART_SetConfig+0x2e6>
 8002d54:	2304      	movs	r3, #4
 8002d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d5a:	e07a      	b.n	8002e52 <UART_SetConfig+0x2e6>
 8002d5c:	2308      	movs	r3, #8
 8002d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d62:	e076      	b.n	8002e52 <UART_SetConfig+0x2e6>
 8002d64:	2310      	movs	r3, #16
 8002d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d6a:	e072      	b.n	8002e52 <UART_SetConfig+0x2e6>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a35      	ldr	r2, [pc, #212]	; (8002e48 <UART_SetConfig+0x2dc>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d12a      	bne.n	8002dcc <UART_SetConfig+0x260>
 8002d76:	4b30      	ldr	r3, [pc, #192]	; (8002e38 <UART_SetConfig+0x2cc>)
 8002d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d84:	d01a      	beq.n	8002dbc <UART_SetConfig+0x250>
 8002d86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d8a:	d81b      	bhi.n	8002dc4 <UART_SetConfig+0x258>
 8002d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d90:	d00c      	beq.n	8002dac <UART_SetConfig+0x240>
 8002d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d96:	d815      	bhi.n	8002dc4 <UART_SetConfig+0x258>
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <UART_SetConfig+0x238>
 8002d9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002da0:	d008      	beq.n	8002db4 <UART_SetConfig+0x248>
 8002da2:	e00f      	b.n	8002dc4 <UART_SetConfig+0x258>
 8002da4:	2300      	movs	r3, #0
 8002da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002daa:	e052      	b.n	8002e52 <UART_SetConfig+0x2e6>
 8002dac:	2302      	movs	r3, #2
 8002dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002db2:	e04e      	b.n	8002e52 <UART_SetConfig+0x2e6>
 8002db4:	2304      	movs	r3, #4
 8002db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dba:	e04a      	b.n	8002e52 <UART_SetConfig+0x2e6>
 8002dbc:	2308      	movs	r3, #8
 8002dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dc2:	e046      	b.n	8002e52 <UART_SetConfig+0x2e6>
 8002dc4:	2310      	movs	r3, #16
 8002dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dca:	e042      	b.n	8002e52 <UART_SetConfig+0x2e6>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a17      	ldr	r2, [pc, #92]	; (8002e30 <UART_SetConfig+0x2c4>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d13a      	bne.n	8002e4c <UART_SetConfig+0x2e0>
 8002dd6:	4b18      	ldr	r3, [pc, #96]	; (8002e38 <UART_SetConfig+0x2cc>)
 8002dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ddc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002de0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002de4:	d01a      	beq.n	8002e1c <UART_SetConfig+0x2b0>
 8002de6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002dea:	d81b      	bhi.n	8002e24 <UART_SetConfig+0x2b8>
 8002dec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002df0:	d00c      	beq.n	8002e0c <UART_SetConfig+0x2a0>
 8002df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002df6:	d815      	bhi.n	8002e24 <UART_SetConfig+0x2b8>
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <UART_SetConfig+0x298>
 8002dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e00:	d008      	beq.n	8002e14 <UART_SetConfig+0x2a8>
 8002e02:	e00f      	b.n	8002e24 <UART_SetConfig+0x2b8>
 8002e04:	2300      	movs	r3, #0
 8002e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e0a:	e022      	b.n	8002e52 <UART_SetConfig+0x2e6>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e12:	e01e      	b.n	8002e52 <UART_SetConfig+0x2e6>
 8002e14:	2304      	movs	r3, #4
 8002e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e1a:	e01a      	b.n	8002e52 <UART_SetConfig+0x2e6>
 8002e1c:	2308      	movs	r3, #8
 8002e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e22:	e016      	b.n	8002e52 <UART_SetConfig+0x2e6>
 8002e24:	2310      	movs	r3, #16
 8002e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e2a:	e012      	b.n	8002e52 <UART_SetConfig+0x2e6>
 8002e2c:	efff69f3 	.word	0xefff69f3
 8002e30:	40008000 	.word	0x40008000
 8002e34:	40013800 	.word	0x40013800
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	40004400 	.word	0x40004400
 8002e40:	40004800 	.word	0x40004800
 8002e44:	40004c00 	.word	0x40004c00
 8002e48:	40005000 	.word	0x40005000
 8002e4c:	2310      	movs	r3, #16
 8002e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a9f      	ldr	r2, [pc, #636]	; (80030d4 <UART_SetConfig+0x568>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d17a      	bne.n	8002f52 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d824      	bhi.n	8002eae <UART_SetConfig+0x342>
 8002e64:	a201      	add	r2, pc, #4	; (adr r2, 8002e6c <UART_SetConfig+0x300>)
 8002e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6a:	bf00      	nop
 8002e6c:	08002e91 	.word	0x08002e91
 8002e70:	08002eaf 	.word	0x08002eaf
 8002e74:	08002e99 	.word	0x08002e99
 8002e78:	08002eaf 	.word	0x08002eaf
 8002e7c:	08002e9f 	.word	0x08002e9f
 8002e80:	08002eaf 	.word	0x08002eaf
 8002e84:	08002eaf 	.word	0x08002eaf
 8002e88:	08002eaf 	.word	0x08002eaf
 8002e8c:	08002ea7 	.word	0x08002ea7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e90:	f7ff f8d6 	bl	8002040 <HAL_RCC_GetPCLK1Freq>
 8002e94:	61f8      	str	r0, [r7, #28]
        break;
 8002e96:	e010      	b.n	8002eba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e98:	4b8f      	ldr	r3, [pc, #572]	; (80030d8 <UART_SetConfig+0x56c>)
 8002e9a:	61fb      	str	r3, [r7, #28]
        break;
 8002e9c:	e00d      	b.n	8002eba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e9e:	f7ff f837 	bl	8001f10 <HAL_RCC_GetSysClockFreq>
 8002ea2:	61f8      	str	r0, [r7, #28]
        break;
 8002ea4:	e009      	b.n	8002eba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eaa:	61fb      	str	r3, [r7, #28]
        break;
 8002eac:	e005      	b.n	8002eba <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002eb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 80fb 	beq.w	80030b8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	4413      	add	r3, r2
 8002ecc:	69fa      	ldr	r2, [r7, #28]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d305      	bcc.n	8002ede <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ed8:	69fa      	ldr	r2, [r7, #28]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d903      	bls.n	8002ee6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002ee4:	e0e8      	b.n	80030b8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	461c      	mov	r4, r3
 8002eec:	4615      	mov	r5, r2
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	f04f 0300 	mov.w	r3, #0
 8002ef6:	022b      	lsls	r3, r5, #8
 8002ef8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002efc:	0222      	lsls	r2, r4, #8
 8002efe:	68f9      	ldr	r1, [r7, #12]
 8002f00:	6849      	ldr	r1, [r1, #4]
 8002f02:	0849      	lsrs	r1, r1, #1
 8002f04:	2000      	movs	r0, #0
 8002f06:	4688      	mov	r8, r1
 8002f08:	4681      	mov	r9, r0
 8002f0a:	eb12 0a08 	adds.w	sl, r2, r8
 8002f0e:	eb43 0b09 	adc.w	fp, r3, r9
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	603b      	str	r3, [r7, #0]
 8002f1a:	607a      	str	r2, [r7, #4]
 8002f1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f20:	4650      	mov	r0, sl
 8002f22:	4659      	mov	r1, fp
 8002f24:	f7fd f950 	bl	80001c8 <__aeabi_uldivmod>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f36:	d308      	bcc.n	8002f4a <UART_SetConfig+0x3de>
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f3e:	d204      	bcs.n	8002f4a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	60da      	str	r2, [r3, #12]
 8002f48:	e0b6      	b.n	80030b8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002f50:	e0b2      	b.n	80030b8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f5a:	d15e      	bne.n	800301a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002f5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d828      	bhi.n	8002fb6 <UART_SetConfig+0x44a>
 8002f64:	a201      	add	r2, pc, #4	; (adr r2, 8002f6c <UART_SetConfig+0x400>)
 8002f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6a:	bf00      	nop
 8002f6c:	08002f91 	.word	0x08002f91
 8002f70:	08002f99 	.word	0x08002f99
 8002f74:	08002fa1 	.word	0x08002fa1
 8002f78:	08002fb7 	.word	0x08002fb7
 8002f7c:	08002fa7 	.word	0x08002fa7
 8002f80:	08002fb7 	.word	0x08002fb7
 8002f84:	08002fb7 	.word	0x08002fb7
 8002f88:	08002fb7 	.word	0x08002fb7
 8002f8c:	08002faf 	.word	0x08002faf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f90:	f7ff f856 	bl	8002040 <HAL_RCC_GetPCLK1Freq>
 8002f94:	61f8      	str	r0, [r7, #28]
        break;
 8002f96:	e014      	b.n	8002fc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f98:	f7ff f868 	bl	800206c <HAL_RCC_GetPCLK2Freq>
 8002f9c:	61f8      	str	r0, [r7, #28]
        break;
 8002f9e:	e010      	b.n	8002fc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fa0:	4b4d      	ldr	r3, [pc, #308]	; (80030d8 <UART_SetConfig+0x56c>)
 8002fa2:	61fb      	str	r3, [r7, #28]
        break;
 8002fa4:	e00d      	b.n	8002fc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fa6:	f7fe ffb3 	bl	8001f10 <HAL_RCC_GetSysClockFreq>
 8002faa:	61f8      	str	r0, [r7, #28]
        break;
 8002fac:	e009      	b.n	8002fc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fb2:	61fb      	str	r3, [r7, #28]
        break;
 8002fb4:	e005      	b.n	8002fc2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002fc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d077      	beq.n	80030b8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	005a      	lsls	r2, r3, #1
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	085b      	lsrs	r3, r3, #1
 8002fd2:	441a      	add	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fdc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	2b0f      	cmp	r3, #15
 8002fe2:	d916      	bls.n	8003012 <UART_SetConfig+0x4a6>
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fea:	d212      	bcs.n	8003012 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	f023 030f 	bic.w	r3, r3, #15
 8002ff4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	085b      	lsrs	r3, r3, #1
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	b29a      	uxth	r2, r3
 8003002:	8afb      	ldrh	r3, [r7, #22]
 8003004:	4313      	orrs	r3, r2
 8003006:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	8afa      	ldrh	r2, [r7, #22]
 800300e:	60da      	str	r2, [r3, #12]
 8003010:	e052      	b.n	80030b8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003018:	e04e      	b.n	80030b8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800301a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800301e:	2b08      	cmp	r3, #8
 8003020:	d827      	bhi.n	8003072 <UART_SetConfig+0x506>
 8003022:	a201      	add	r2, pc, #4	; (adr r2, 8003028 <UART_SetConfig+0x4bc>)
 8003024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003028:	0800304d 	.word	0x0800304d
 800302c:	08003055 	.word	0x08003055
 8003030:	0800305d 	.word	0x0800305d
 8003034:	08003073 	.word	0x08003073
 8003038:	08003063 	.word	0x08003063
 800303c:	08003073 	.word	0x08003073
 8003040:	08003073 	.word	0x08003073
 8003044:	08003073 	.word	0x08003073
 8003048:	0800306b 	.word	0x0800306b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800304c:	f7fe fff8 	bl	8002040 <HAL_RCC_GetPCLK1Freq>
 8003050:	61f8      	str	r0, [r7, #28]
        break;
 8003052:	e014      	b.n	800307e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003054:	f7ff f80a 	bl	800206c <HAL_RCC_GetPCLK2Freq>
 8003058:	61f8      	str	r0, [r7, #28]
        break;
 800305a:	e010      	b.n	800307e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800305c:	4b1e      	ldr	r3, [pc, #120]	; (80030d8 <UART_SetConfig+0x56c>)
 800305e:	61fb      	str	r3, [r7, #28]
        break;
 8003060:	e00d      	b.n	800307e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003062:	f7fe ff55 	bl	8001f10 <HAL_RCC_GetSysClockFreq>
 8003066:	61f8      	str	r0, [r7, #28]
        break;
 8003068:	e009      	b.n	800307e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800306a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800306e:	61fb      	str	r3, [r7, #28]
        break;
 8003070:	e005      	b.n	800307e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003072:	2300      	movs	r3, #0
 8003074:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800307c:	bf00      	nop
    }

    if (pclk != 0U)
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d019      	beq.n	80030b8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	085a      	lsrs	r2, r3, #1
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	441a      	add	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	fbb2 f3f3 	udiv	r3, r2, r3
 8003096:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	2b0f      	cmp	r3, #15
 800309c:	d909      	bls.n	80030b2 <UART_SetConfig+0x546>
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a4:	d205      	bcs.n	80030b2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	60da      	str	r2, [r3, #12]
 80030b0:	e002      	b.n	80030b8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80030c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3728      	adds	r7, #40	; 0x28
 80030cc:	46bd      	mov	sp, r7
 80030ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030d2:	bf00      	nop
 80030d4:	40008000 	.word	0x40008000
 80030d8:	00f42400 	.word	0x00f42400

080030dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00a      	beq.n	8003106 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00a      	beq.n	8003128 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00a      	beq.n	800314a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00a      	beq.n	800316c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	f003 0310 	and.w	r3, r3, #16
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00a      	beq.n	800318e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	f003 0320 	and.w	r3, r3, #32
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00a      	beq.n	80031b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d01a      	beq.n	80031f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031da:	d10a      	bne.n	80031f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00a      	beq.n	8003214 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	605a      	str	r2, [r3, #4]
  }
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af02      	add	r7, sp, #8
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003230:	f7fd fe7a 	bl	8000f28 <HAL_GetTick>
 8003234:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	2b08      	cmp	r3, #8
 8003242:	d10e      	bne.n	8003262 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003244:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f82d 	bl	80032b2 <UART_WaitOnFlagUntilTimeout>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e023      	b.n	80032aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b04      	cmp	r3, #4
 800326e:	d10e      	bne.n	800328e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003270:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f817 	bl	80032b2 <UART_WaitOnFlagUntilTimeout>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e00d      	b.n	80032aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2220      	movs	r2, #32
 8003292:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2220      	movs	r2, #32
 8003298:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b09c      	sub	sp, #112	; 0x70
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	603b      	str	r3, [r7, #0]
 80032be:	4613      	mov	r3, r2
 80032c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032c2:	e0a5      	b.n	8003410 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ca:	f000 80a1 	beq.w	8003410 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ce:	f7fd fe2b 	bl	8000f28 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80032da:	429a      	cmp	r2, r3
 80032dc:	d302      	bcc.n	80032e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80032de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d13e      	bne.n	8003362 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032ec:	e853 3f00 	ldrex	r3, [r3]
 80032f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80032f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032f8:	667b      	str	r3, [r7, #100]	; 0x64
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	461a      	mov	r2, r3
 8003300:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003302:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003304:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003306:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003308:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800330a:	e841 2300 	strex	r3, r2, [r1]
 800330e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1e6      	bne.n	80032e4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	3308      	adds	r3, #8
 800331c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003320:	e853 3f00 	ldrex	r3, [r3]
 8003324:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003328:	f023 0301 	bic.w	r3, r3, #1
 800332c:	663b      	str	r3, [r7, #96]	; 0x60
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	3308      	adds	r3, #8
 8003334:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003336:	64ba      	str	r2, [r7, #72]	; 0x48
 8003338:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800333c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800333e:	e841 2300 	strex	r3, r2, [r1]
 8003342:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1e5      	bne.n	8003316 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2220      	movs	r2, #32
 800334e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2220      	movs	r2, #32
 8003354:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e067      	b.n	8003432 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b00      	cmp	r3, #0
 800336e:	d04f      	beq.n	8003410 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800337a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800337e:	d147      	bne.n	8003410 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003388:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003392:	e853 3f00 	ldrex	r3, [r3]
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800339e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	461a      	mov	r2, r3
 80033a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033a8:	637b      	str	r3, [r7, #52]	; 0x34
 80033aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033b0:	e841 2300 	strex	r3, r2, [r1]
 80033b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1e6      	bne.n	800338a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	3308      	adds	r3, #8
 80033c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	e853 3f00 	ldrex	r3, [r3]
 80033ca:	613b      	str	r3, [r7, #16]
   return(result);
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	f023 0301 	bic.w	r3, r3, #1
 80033d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	3308      	adds	r3, #8
 80033da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80033dc:	623a      	str	r2, [r7, #32]
 80033de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e0:	69f9      	ldr	r1, [r7, #28]
 80033e2:	6a3a      	ldr	r2, [r7, #32]
 80033e4:	e841 2300 	strex	r3, r2, [r1]
 80033e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1e5      	bne.n	80033bc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2220      	movs	r2, #32
 80033f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2220      	movs	r2, #32
 80033fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2220      	movs	r2, #32
 8003400:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e010      	b.n	8003432 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	69da      	ldr	r2, [r3, #28]
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	4013      	ands	r3, r2
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	429a      	cmp	r2, r3
 800341e:	bf0c      	ite	eq
 8003420:	2301      	moveq	r3, #1
 8003422:	2300      	movne	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	461a      	mov	r2, r3
 8003428:	79fb      	ldrb	r3, [r7, #7]
 800342a:	429a      	cmp	r2, r3
 800342c:	f43f af4a 	beq.w	80032c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3770      	adds	r7, #112	; 0x70
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
	...

0800343c <__libc_init_array>:
 800343c:	b570      	push	{r4, r5, r6, lr}
 800343e:	4d0d      	ldr	r5, [pc, #52]	; (8003474 <__libc_init_array+0x38>)
 8003440:	4c0d      	ldr	r4, [pc, #52]	; (8003478 <__libc_init_array+0x3c>)
 8003442:	1b64      	subs	r4, r4, r5
 8003444:	10a4      	asrs	r4, r4, #2
 8003446:	2600      	movs	r6, #0
 8003448:	42a6      	cmp	r6, r4
 800344a:	d109      	bne.n	8003460 <__libc_init_array+0x24>
 800344c:	4d0b      	ldr	r5, [pc, #44]	; (800347c <__libc_init_array+0x40>)
 800344e:	4c0c      	ldr	r4, [pc, #48]	; (8003480 <__libc_init_array+0x44>)
 8003450:	f000 f820 	bl	8003494 <_init>
 8003454:	1b64      	subs	r4, r4, r5
 8003456:	10a4      	asrs	r4, r4, #2
 8003458:	2600      	movs	r6, #0
 800345a:	42a6      	cmp	r6, r4
 800345c:	d105      	bne.n	800346a <__libc_init_array+0x2e>
 800345e:	bd70      	pop	{r4, r5, r6, pc}
 8003460:	f855 3b04 	ldr.w	r3, [r5], #4
 8003464:	4798      	blx	r3
 8003466:	3601      	adds	r6, #1
 8003468:	e7ee      	b.n	8003448 <__libc_init_array+0xc>
 800346a:	f855 3b04 	ldr.w	r3, [r5], #4
 800346e:	4798      	blx	r3
 8003470:	3601      	adds	r6, #1
 8003472:	e7f2      	b.n	800345a <__libc_init_array+0x1e>
 8003474:	0800352c 	.word	0x0800352c
 8003478:	0800352c 	.word	0x0800352c
 800347c:	0800352c 	.word	0x0800352c
 8003480:	08003530 	.word	0x08003530

08003484 <memset>:
 8003484:	4402      	add	r2, r0
 8003486:	4603      	mov	r3, r0
 8003488:	4293      	cmp	r3, r2
 800348a:	d100      	bne.n	800348e <memset+0xa>
 800348c:	4770      	bx	lr
 800348e:	f803 1b01 	strb.w	r1, [r3], #1
 8003492:	e7f9      	b.n	8003488 <memset+0x4>

08003494 <_init>:
 8003494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003496:	bf00      	nop
 8003498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800349a:	bc08      	pop	{r3}
 800349c:	469e      	mov	lr, r3
 800349e:	4770      	bx	lr

080034a0 <_fini>:
 80034a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034a2:	bf00      	nop
 80034a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034a6:	bc08      	pop	{r3}
 80034a8:	469e      	mov	lr, r3
 80034aa:	4770      	bx	lr
